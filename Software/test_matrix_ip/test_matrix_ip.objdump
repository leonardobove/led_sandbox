
test_matrix_ip.elf:     file format elf32-littlenios2
test_matrix_ip.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00003878 memsz 0x00003878 flags r-x
    LOAD off    0x00004898 vaddr 0x04003898 paddr 0x04004f4c align 2**12
         filesz 0x000016b4 memsz 0x000016b4 flags rw-
    LOAD off    0x00006600 vaddr 0x04006600 paddr 0x04006600 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003600  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  04003830  04003830  00004830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016b4  04003898  04004f4c  00004898  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  04006600  04006600  00006600  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04006720  04006720  00005f4c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005f4c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f8  00000000  00000000  00005f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000085fe  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002cd2  00000000  00000000  0000eb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000030db  00000000  00000000  00011838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000de4  00000000  00000000  00014914  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f70  00000000  00000000  000156f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000803  00000000  00000000  00017668  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00017e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00017e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00019db9  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00019dbc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00019dbf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00019dc0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00019dc1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00019dc5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00019dc9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00019dcd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00019dd6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00019ddf  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  00019de8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  00019def  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000559b8  00000000  00000000  00019e16  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04003830 l    d  .rodata	00000000 .rodata
04003898 l    d  .rwdata	00000000 .rwdata
04006600 l    d  .bss	00000000 .bss
04006720 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/leona/Desktop/led_sandbox/software/test_matrix_ip_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
04000300 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04000468 l     F .text	00000034 alt_dev_reg
04003898 l     O .rwdata	00001060 jtag_uart
040048f8 l     O .rwdata	0000005c video_dma_controller_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040009ec l     F .text	0000020c altera_avalon_jtag_uart_irq
04000bf8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04001230 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_dma_controller.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
040023ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040024e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400250c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040029fc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04002b5c l     F .text	0000003c alt_get_errno
04002b98 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04004afc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
04006618 g     O .bss	00000004 alt_instruction_exception_handler
040003ec g     F .text	0000007c alt_main
04006620 g     O .bss	00000100 alt_irq
04004f4c g       *ABS*	00000000 __flash_rwdata_start
04003008 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04001de0 g     F .text	00000040 alt_up_video_dma_screen_clear
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400661c g     O .bss	00000004 errno
04006604 g     O .bss	00000004 alt_argv
0400cf20 g       *ABS*	00000000 _gp
04001e98 g     F .text	00000140 alt_up_video_dma_draw_hline
0400497c g     O .rwdata	00000180 alt_fd_list
040026ac g     F .text	00000090 alt_find_dev
0400335c g     F .text	00000148 memcpy
04002ae0 g     F .text	0000007c alt_io_redirect
04003830 g       *ABS*	00000000 __DTOR_END__
040031f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04001360 g     F .text	0000005c alt_up_video_dma_ctrl_set_bb_addr
04000df0 g     F .text	0000021c altera_avalon_jtag_uart_read
04004f30 g     O .rwdata	00000004 alt_max_fd
04004f44 g     O .rwdata	00000004 _global_impure_ptr
04006720 g       *ABS*	00000000 __bss_end
0400290c g     F .text	000000f0 alt_iic_isr_register
04002f00 g     F .text	00000108 alt_tick
040028c0 g     F .text	0000004c alt_ic_irq_enabled
04002e64 g     F .text	0000009c alt_alarm_stop
0400660c g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04004954 g     O .rwdata	00000028 alt_dev_null
040024c0 g     F .text	00000020 alt_dcache_flush_all
04004f4c g       *ABS*	00000000 __ram_rwdata_end
04004f28 g     O .rwdata	00000008 alt_dev_list
04003898 g       *ABS*	00000000 __ram_rodata_end
04006720 g       *ABS*	00000000 end
04001fd8 g     F .text	00000164 alt_up_video_dma_draw_vline
0400092c g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400141c g     F .text	00000034 alt_up_video_dma_ctrl_check_swap_status
04003830 g       *ABS*	00000000 __CTOR_LIST__
04002218 g     F .text	00000068 alt_up_video_dma_draw_helper
08000000 g       *ABS*	00000000 __alt_stack_pointer
040012a8 g     F .text	0000007c alt_avalon_timer_sc_init
0400100c g     F .text	00000224 altera_avalon_jtag_uart_write
04003654 g     F .text	00000180 __call_exitprocs
04000230 g     F .text	0000003c _start
04006610 g     O .bss	00000004 _alt_tick_rate
04001450 g     F .text	00000174 alt_up_video_dma_draw
04006614 g     O .bss	00000004 _alt_nticks
040004d4 g     F .text	000002f4 alt_sys_init
0400353c g     F .text	00000118 __register_exitproc
0400213c g     F .text	000000dc alt_up_video_dma_draw_rectangle
04000c98 g     F .text	00000068 altera_avalon_jtag_uart_close
040037d4 g     F .text	00000028 .hidden __mulsi3
04003898 g       *ABS*	00000000 __ram_rwdata_start
04003830 g       *ABS*	00000000 __ram_rodata_start
040007c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04003134 g     F .text	000000c4 alt_get_fd
040032e0 g     F .text	0000007c memcmp
04000888 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04006720 g       *ABS*	00000000 __alt_stack_base
040008d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400302c g     F .text	00000108 alt_find_file
04002548 g     F .text	000000a4 alt_dev_llist_insert
04006600 g       *ABS*	00000000 __bss_start
0400026c g     F .text	00000094 main
04006608 g     O .bss	00000004 alt_envp
04000828 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04004f34 g     O .rwdata	00000004 alt_errno
04003830 g       *ABS*	00000000 __CTOR_END__
04003830 g       *ABS*	00000000 __flash_rodata_start
04003830 g       *ABS*	00000000 __DTOR_LIST__
040018f8 g     F .text	000002a4 alt_up_video_dma_draw_line
0400049c g     F .text	00000038 alt_irq_init
04002de0 g     F .text	00000084 alt_release_fd
04003294 g     F .text	00000014 atexit
04004f48 g     O .rwdata	00000004 _impure_ptr
04006600 g     O .bss	00000004 alt_argc
0400264c g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04004f20 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400275c g     F .text	00000050 alt_ic_isr_register
04001b9c g     F .text	00000244 alt_up_video_dma_draw_string
04004f4c g       *ABS*	00000000 _edata
04006720 g       *ABS*	00000000 _end
04001324 g     F .text	0000003c alt_up_video_dma_open_dev
04000230 g       *ABS*	00000000 __ram_exceptions_end
04000d00 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002834 g     F .text	0000008c alt_ic_irq_disable
04001e20 g     F .text	00000078 alt_up_video_dma_screen_fill
040032a8 g     F .text	00000038 exit
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040037fc g     F .text	00000034 _exit
04002280 g     F .text	0000012c alt_alarm_start
040034a4 g     F .text	00000098 strlen
04002c84 g     F .text	0000015c open
0400273c g     F .text	00000020 alt_icache_flush_all
04004f38 g     O .rwdata	00000004 alt_priority_mask
040027ac g     F .text	00000088 alt_ic_irq_enable
040015c4 g     F .text	00000334 alt_up_video_dma_draw_box
04004f3c g     O .rwdata	00000008 alt_alarm_list
040025ec g     F .text	00000060 _do_ctors
040023e8 g     F .text	000000d8 close
04000368 g     F .text	00000084 alt_load
040013bc g     F .text	00000060 alt_up_video_dma_ctrl_swap_buffers



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810034 	movhi	r2,1024
 4000140:	10998804 	addi	r2,r2,26144
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810034 	movhi	r2,1024
 4000158:	10998804 	addi	r2,r2,26144
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a5be17 	ldw	r2,-26888(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a5be17 	ldw	r2,-26888(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400023c:	d6b3c814 	ori	gp,gp,53024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000244:	10998014 	ori	r2,r2,26112

    movhi r3, %hi(__bss_end)
 4000248:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400024c:	18d9c814 	ori	r3,r3,26400

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40003680 	call	4000368 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40003ec0 	call	40003ec <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <main>:
#include "system.h"

#define WIDTH 	(64u)
#define HEIGHT 	(16u)

int main() {
 400026c:	defdfb04 	addi	sp,sp,-2068
 4000270:	dfc20415 	stw	ra,2064(sp)
 4000274:	df020315 	stw	fp,2060(sp)
 4000278:	df020304 	addi	fp,sp,2060
	uint16_t frame_buffer[WIDTH*HEIGHT];

	for (int i = 0; i < WIDTH*HEIGHT; i++) {
 400027c:	e03dfd15 	stw	zero,-2060(fp)
 4000280:	00000a06 	br	40002ac <main+0x40>
		frame_buffer[i] = 0xFFFF;
 4000284:	e0bdfd17 	ldw	r2,-2060(fp)
 4000288:	1085883a 	add	r2,r2,r2
 400028c:	e0fdfd04 	addi	r3,fp,-2060
 4000290:	1885883a 	add	r2,r3,r2
 4000294:	10800204 	addi	r2,r2,8
 4000298:	00ffffc4 	movi	r3,-1
 400029c:	10c0000d 	sth	r3,0(r2)
#define HEIGHT 	(16u)

int main() {
	uint16_t frame_buffer[WIDTH*HEIGHT];

	for (int i = 0; i < WIDTH*HEIGHT; i++) {
 40002a0:	e0bdfd17 	ldw	r2,-2060(fp)
 40002a4:	10800044 	addi	r2,r2,1
 40002a8:	e0bdfd15 	stw	r2,-2060(fp)
 40002ac:	e0bdfd17 	ldw	r2,-2060(fp)
 40002b0:	10810030 	cmpltui	r2,r2,1024
 40002b4:	103ff31e 	bne	r2,zero,4000284 <__alt_data_end+0xfc000284>
		frame_buffer[i] = 0xFFFF;
	}

	alt_up_video_dma_dev* dma_dev_handler = alt_up_video_dma_open_dev("/dev/video_dma_controller_0");
 40002b8:	01010034 	movhi	r4,1024
 40002bc:	210e0c04 	addi	r4,r4,14384
 40002c0:	40013240 	call	4001324 <alt_up_video_dma_open_dev>
 40002c4:	e0bdfe15 	stw	r2,-2056(fp)
	if (alt_up_video_dma_ctrl_set_bb_addr(dma_dev_handler, frame_buffer) != 0) {
 40002c8:	e0bdff04 	addi	r2,fp,-2052
 40002cc:	100b883a 	mov	r5,r2
 40002d0:	e13dfe17 	ldw	r4,-2056(fp)
 40002d4:	40013600 	call	4001360 <alt_up_video_dma_ctrl_set_bb_addr>
 40002d8:	10000126 	beq	r2,zero,40002e0 <main+0x74>
		while (1) {

		}
 40002dc:	003fff06 	br	40002dc <__alt_data_end+0xfc0002dc>
	}
	//alt_up_video_dma_screen_fill(dma_dev_handler, 0xFFFF, 0);
	volatile uint32_t res = 0;
 40002e0:	e03fff15 	stw	zero,-4(fp)
	while (1) {
		if (alt_up_video_dma_ctrl_check_swap_status(dma_dev_handler)) {
 40002e4:	e13dfe17 	ldw	r4,-2056(fp)
 40002e8:	400141c0 	call	400141c <alt_up_video_dma_ctrl_check_swap_status>
 40002ec:	103ffd26 	beq	r2,zero,40002e4 <__alt_data_end+0xfc0002e4>
			res = alt_up_video_dma_ctrl_swap_buffers(dma_dev_handler);
 40002f0:	e13dfe17 	ldw	r4,-2056(fp)
 40002f4:	40013bc0 	call	40013bc <alt_up_video_dma_ctrl_swap_buffers>
 40002f8:	e0bfff15 	stw	r2,-4(fp)
		}
	}
 40002fc:	003ff906 	br	40002e4 <__alt_data_end+0xfc0002e4>

04000300 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000300:	defffc04 	addi	sp,sp,-16
 4000304:	df000315 	stw	fp,12(sp)
 4000308:	df000304 	addi	fp,sp,12
 400030c:	e13ffd15 	stw	r4,-12(fp)
 4000310:	e17ffe15 	stw	r5,-8(fp)
 4000314:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4000318:	e0fffe17 	ldw	r3,-8(fp)
 400031c:	e0bffd17 	ldw	r2,-12(fp)
 4000320:	18800c26 	beq	r3,r2,4000354 <alt_load_section+0x54>
  {
    while( to != end )
 4000324:	00000806 	br	4000348 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4000328:	e0bffe17 	ldw	r2,-8(fp)
 400032c:	10c00104 	addi	r3,r2,4
 4000330:	e0fffe15 	stw	r3,-8(fp)
 4000334:	e0fffd17 	ldw	r3,-12(fp)
 4000338:	19000104 	addi	r4,r3,4
 400033c:	e13ffd15 	stw	r4,-12(fp)
 4000340:	18c00017 	ldw	r3,0(r3)
 4000344:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000348:	e0fffe17 	ldw	r3,-8(fp)
 400034c:	e0bfff17 	ldw	r2,-4(fp)
 4000350:	18bff51e 	bne	r3,r2,4000328 <__alt_data_end+0xfc000328>
    {
      *to++ = *from++;
    }
  }
}
 4000354:	0001883a 	nop
 4000358:	e037883a 	mov	sp,fp
 400035c:	df000017 	ldw	fp,0(sp)
 4000360:	dec00104 	addi	sp,sp,4
 4000364:	f800283a 	ret

04000368 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000368:	defffe04 	addi	sp,sp,-8
 400036c:	dfc00115 	stw	ra,4(sp)
 4000370:	df000015 	stw	fp,0(sp)
 4000374:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000378:	01810034 	movhi	r6,1024
 400037c:	3193d304 	addi	r6,r6,20300
 4000380:	01410034 	movhi	r5,1024
 4000384:	294e2604 	addi	r5,r5,14488
 4000388:	01010034 	movhi	r4,1024
 400038c:	2113d304 	addi	r4,r4,20300
 4000390:	40003000 	call	4000300 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000394:	01810034 	movhi	r6,1024
 4000398:	31808c04 	addi	r6,r6,560
 400039c:	01410034 	movhi	r5,1024
 40003a0:	29400804 	addi	r5,r5,32
 40003a4:	01010034 	movhi	r4,1024
 40003a8:	21000804 	addi	r4,r4,32
 40003ac:	40003000 	call	4000300 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40003b0:	01810034 	movhi	r6,1024
 40003b4:	318e2604 	addi	r6,r6,14488
 40003b8:	01410034 	movhi	r5,1024
 40003bc:	294e0c04 	addi	r5,r5,14384
 40003c0:	01010034 	movhi	r4,1024
 40003c4:	210e0c04 	addi	r4,r4,14384
 40003c8:	40003000 	call	4000300 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40003cc:	40024c00 	call	40024c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40003d0:	400273c0 	call	400273c <alt_icache_flush_all>
}
 40003d4:	0001883a 	nop
 40003d8:	e037883a 	mov	sp,fp
 40003dc:	dfc00117 	ldw	ra,4(sp)
 40003e0:	df000017 	ldw	fp,0(sp)
 40003e4:	dec00204 	addi	sp,sp,8
 40003e8:	f800283a 	ret

040003ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40003ec:	defffd04 	addi	sp,sp,-12
 40003f0:	dfc00215 	stw	ra,8(sp)
 40003f4:	df000115 	stw	fp,4(sp)
 40003f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40003fc:	0009883a 	mov	r4,zero
 4000400:	400049c0 	call	400049c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4000404:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000408:	40004d40 	call	40004d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400040c:	01810034 	movhi	r6,1024
 4000410:	318e1304 	addi	r6,r6,14412
 4000414:	01410034 	movhi	r5,1024
 4000418:	294e1304 	addi	r5,r5,14412
 400041c:	01010034 	movhi	r4,1024
 4000420:	210e1304 	addi	r4,r4,14412
 4000424:	4002ae00 	call	4002ae0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4000428:	40025ec0 	call	40025ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400042c:	01010034 	movhi	r4,1024
 4000430:	21099304 	addi	r4,r4,9804
 4000434:	40032940 	call	4003294 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000438:	d0a5b817 	ldw	r2,-26912(gp)
 400043c:	d0e5b917 	ldw	r3,-26908(gp)
 4000440:	d125ba17 	ldw	r4,-26904(gp)
 4000444:	200d883a 	mov	r6,r4
 4000448:	180b883a 	mov	r5,r3
 400044c:	1009883a 	mov	r4,r2
 4000450:	400026c0 	call	400026c <main>
 4000454:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000458:	01000044 	movi	r4,1
 400045c:	40023e80 	call	40023e8 <close>
  exit (result);
 4000460:	e13fff17 	ldw	r4,-4(fp)
 4000464:	40032a80 	call	40032a8 <exit>

04000468 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4000468:	defffd04 	addi	sp,sp,-12
 400046c:	dfc00215 	stw	ra,8(sp)
 4000470:	df000115 	stw	fp,4(sp)
 4000474:	df000104 	addi	fp,sp,4
 4000478:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400047c:	d1600204 	addi	r5,gp,-32760
 4000480:	e13fff17 	ldw	r4,-4(fp)
 4000484:	40025480 	call	4002548 <alt_dev_llist_insert>
}
 4000488:	e037883a 	mov	sp,fp
 400048c:	dfc00117 	ldw	ra,4(sp)
 4000490:	df000017 	ldw	fp,0(sp)
 4000494:	dec00204 	addi	sp,sp,8
 4000498:	f800283a 	ret

0400049c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400049c:	defffd04 	addi	sp,sp,-12
 40004a0:	dfc00215 	stw	ra,8(sp)
 40004a4:	df000115 	stw	fp,4(sp)
 40004a8:	df000104 	addi	fp,sp,4
 40004ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 40004b0:	40030080 	call	4003008 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40004b4:	00800044 	movi	r2,1
 40004b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40004bc:	0001883a 	nop
 40004c0:	e037883a 	mov	sp,fp
 40004c4:	dfc00117 	ldw	ra,4(sp)
 40004c8:	df000017 	ldw	fp,0(sp)
 40004cc:	dec00204 	addi	sp,sp,8
 40004d0:	f800283a 	ret

040004d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40004d4:	defffd04 	addi	sp,sp,-12
 40004d8:	dfc00215 	stw	ra,8(sp)
 40004dc:	df000115 	stw	fp,4(sp)
 40004e0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 40004e4:	01c0fa04 	movi	r7,1000
 40004e8:	01800044 	movi	r6,1
 40004ec:	000b883a 	mov	r5,zero
 40004f0:	01020034 	movhi	r4,2048
 40004f4:	21040004 	addi	r4,r4,4096
 40004f8:	40012a80 	call	40012a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40004fc:	000d883a 	mov	r6,zero
 4000500:	000b883a 	mov	r5,zero
 4000504:	01010034 	movhi	r4,1024
 4000508:	210e3004 	addi	r4,r4,14528
 400050c:	400092c0 	call	400092c <altera_avalon_jtag_uart_init>
 4000510:	01010034 	movhi	r4,1024
 4000514:	210e2604 	addi	r4,r4,14488
 4000518:	40004680 	call	4000468 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
 400051c:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER_0, video_dma_controller_0);
 4000520:	00810034 	movhi	r2,1024
 4000524:	10923e04 	addi	r2,r2,18680
 4000528:	10800a17 	ldw	r2,40(r2)
 400052c:	10800017 	ldw	r2,0(r2)
 4000530:	1007883a 	mov	r3,r2
 4000534:	00810034 	movhi	r2,1024
 4000538:	10923e04 	addi	r2,r2,18680
 400053c:	10c00b15 	stw	r3,44(r2)
 4000540:	00810034 	movhi	r2,1024
 4000544:	10923e04 	addi	r2,r2,18680
 4000548:	10800a17 	ldw	r2,40(r2)
 400054c:	10800104 	addi	r2,r2,4
 4000550:	10800017 	ldw	r2,0(r2)
 4000554:	1007883a 	mov	r3,r2
 4000558:	00810034 	movhi	r2,1024
 400055c:	10923e04 	addi	r2,r2,18680
 4000560:	10c00c15 	stw	r3,48(r2)
 4000564:	00810034 	movhi	r2,1024
 4000568:	10923e04 	addi	r2,r2,18680
 400056c:	10800a17 	ldw	r2,40(r2)
 4000570:	10800204 	addi	r2,r2,8
 4000574:	10800017 	ldw	r2,0(r2)
 4000578:	10ffffcc 	andi	r3,r2,65535
 400057c:	00810034 	movhi	r2,1024
 4000580:	10923e04 	addi	r2,r2,18680
 4000584:	10c01115 	stw	r3,68(r2)
 4000588:	00810034 	movhi	r2,1024
 400058c:	10923e04 	addi	r2,r2,18680
 4000590:	10800a17 	ldw	r2,40(r2)
 4000594:	10800204 	addi	r2,r2,8
 4000598:	10800017 	ldw	r2,0(r2)
 400059c:	1006d43a 	srli	r3,r2,16
 40005a0:	00810034 	movhi	r2,1024
 40005a4:	10923e04 	addi	r2,r2,18680
 40005a8:	10c01215 	stw	r3,72(r2)
 40005ac:	00810034 	movhi	r2,1024
 40005b0:	10923e04 	addi	r2,r2,18680
 40005b4:	10800a17 	ldw	r2,40(r2)
 40005b8:	10800304 	addi	r2,r2,12
 40005bc:	10800017 	ldw	r2,0(r2)
 40005c0:	1005d07a 	srai	r2,r2,1
 40005c4:	10c0004c 	andi	r3,r2,1
 40005c8:	00810034 	movhi	r2,1024
 40005cc:	10923e04 	addi	r2,r2,18680
 40005d0:	10c00d15 	stw	r3,52(r2)
 40005d4:	00810034 	movhi	r2,1024
 40005d8:	10923e04 	addi	r2,r2,18680
 40005dc:	10800a17 	ldw	r2,40(r2)
 40005e0:	10800304 	addi	r2,r2,12
 40005e4:	10800017 	ldw	r2,0(r2)
 40005e8:	1005d23a 	srai	r2,r2,8
 40005ec:	108003cc 	andi	r2,r2,15
 40005f0:	10800044 	addi	r2,r2,1
 40005f4:	1007883a 	mov	r3,r2
 40005f8:	00810034 	movhi	r2,1024
 40005fc:	10923e04 	addi	r2,r2,18680
 4000600:	10c00e15 	stw	r3,56(r2)
 4000604:	00810034 	movhi	r2,1024
 4000608:	10923e04 	addi	r2,r2,18680
 400060c:	10800a17 	ldw	r2,40(r2)
 4000610:	10800304 	addi	r2,r2,12
 4000614:	10800017 	ldw	r2,0(r2)
 4000618:	1005d1ba 	srai	r2,r2,6
 400061c:	108000cc 	andi	r2,r2,3
 4000620:	10800044 	addi	r2,r2,1
 4000624:	1007883a 	mov	r3,r2
 4000628:	00810034 	movhi	r2,1024
 400062c:	10923e04 	addi	r2,r2,18680
 4000630:	10c00f15 	stw	r3,60(r2)
 4000634:	00810034 	movhi	r2,1024
 4000638:	10923e04 	addi	r2,r2,18680
 400063c:	10800e17 	ldw	r2,56(r2)
 4000640:	1007883a 	mov	r3,r2
 4000644:	00810034 	movhi	r2,1024
 4000648:	10923e04 	addi	r2,r2,18680
 400064c:	10800f17 	ldw	r2,60(r2)
 4000650:	100b883a 	mov	r5,r2
 4000654:	1809883a 	mov	r4,r3
 4000658:	40037d40 	call	40037d4 <__mulsi3>
 400065c:	e0bfff05 	stb	r2,-4(fp)
 4000660:	e0bfff03 	ldbu	r2,-4(fp)
 4000664:	10800268 	cmpgeui	r2,r2,9
 4000668:	1000051e 	bne	r2,zero,4000680 <alt_sys_init+0x1ac>
 400066c:	00810034 	movhi	r2,1024
 4000670:	10923e04 	addi	r2,r2,18680
 4000674:	00c00044 	movi	r3,1
 4000678:	10c01015 	stw	r3,64(r2)
 400067c:	00000c06 	br	40006b0 <alt_sys_init+0x1dc>
 4000680:	e0bfff03 	ldbu	r2,-4(fp)
 4000684:	10800468 	cmpgeui	r2,r2,17
 4000688:	1000051e 	bne	r2,zero,40006a0 <alt_sys_init+0x1cc>
 400068c:	00810034 	movhi	r2,1024
 4000690:	10923e04 	addi	r2,r2,18680
 4000694:	00c00084 	movi	r3,2
 4000698:	10c01015 	stw	r3,64(r2)
 400069c:	00000406 	br	40006b0 <alt_sys_init+0x1dc>
 40006a0:	00810034 	movhi	r2,1024
 40006a4:	10923e04 	addi	r2,r2,18680
 40006a8:	00c00104 	movi	r3,4
 40006ac:	10c01015 	stw	r3,64(r2)
 40006b0:	00810034 	movhi	r2,1024
 40006b4:	10923e04 	addi	r2,r2,18680
 40006b8:	10800a17 	ldw	r2,40(r2)
 40006bc:	10800304 	addi	r2,r2,12
 40006c0:	10800017 	ldw	r2,0(r2)
 40006c4:	1005d43a 	srai	r2,r2,16
 40006c8:	e0bfff45 	stb	r2,-3(fp)
 40006cc:	00810034 	movhi	r2,1024
 40006d0:	10923e04 	addi	r2,r2,18680
 40006d4:	10800a17 	ldw	r2,40(r2)
 40006d8:	10800304 	addi	r2,r2,12
 40006dc:	10800017 	ldw	r2,0(r2)
 40006e0:	1004d63a 	srli	r2,r2,24
 40006e4:	e0bfff85 	stb	r2,-2(fp)
 40006e8:	00810034 	movhi	r2,1024
 40006ec:	10923e04 	addi	r2,r2,18680
 40006f0:	10801017 	ldw	r2,64(r2)
 40006f4:	10800058 	cmpnei	r2,r2,1
 40006f8:	1000041e 	bne	r2,zero,400070c <alt_sys_init+0x238>
 40006fc:	00810034 	movhi	r2,1024
 4000700:	10923e04 	addi	r2,r2,18680
 4000704:	10001315 	stw	zero,76(r2)
 4000708:	00000e06 	br	4000744 <alt_sys_init+0x270>
 400070c:	00810034 	movhi	r2,1024
 4000710:	10923e04 	addi	r2,r2,18680
 4000714:	10801017 	ldw	r2,64(r2)
 4000718:	10800098 	cmpnei	r2,r2,2
 400071c:	1000051e 	bne	r2,zero,4000734 <alt_sys_init+0x260>
 4000720:	00810034 	movhi	r2,1024
 4000724:	10923e04 	addi	r2,r2,18680
 4000728:	00c00044 	movi	r3,1
 400072c:	10c01315 	stw	r3,76(r2)
 4000730:	00000406 	br	4000744 <alt_sys_init+0x270>
 4000734:	00810034 	movhi	r2,1024
 4000738:	10923e04 	addi	r2,r2,18680
 400073c:	00c00084 	movi	r3,2
 4000740:	10c01315 	stw	r3,76(r2)
 4000744:	e0bfff43 	ldbu	r2,-3(fp)
 4000748:	00c00804 	movi	r3,32
 400074c:	1885c83a 	sub	r2,r3,r2
 4000750:	00ffffc4 	movi	r3,-1
 4000754:	1886d83a 	srl	r3,r3,r2
 4000758:	00810034 	movhi	r2,1024
 400075c:	10923e04 	addi	r2,r2,18680
 4000760:	10c01415 	stw	r3,80(r2)
 4000764:	e0ffff43 	ldbu	r3,-3(fp)
 4000768:	00810034 	movhi	r2,1024
 400076c:	10923e04 	addi	r2,r2,18680
 4000770:	10801317 	ldw	r2,76(r2)
 4000774:	1887883a 	add	r3,r3,r2
 4000778:	00810034 	movhi	r2,1024
 400077c:	10923e04 	addi	r2,r2,18680
 4000780:	10c01515 	stw	r3,84(r2)
 4000784:	e0bfff83 	ldbu	r2,-2(fp)
 4000788:	00c00804 	movi	r3,32
 400078c:	1885c83a 	sub	r2,r3,r2
 4000790:	00ffffc4 	movi	r3,-1
 4000794:	1886d83a 	srl	r3,r3,r2
 4000798:	00810034 	movhi	r2,1024
 400079c:	10923e04 	addi	r2,r2,18680
 40007a0:	10c01615 	stw	r3,88(r2)
 40007a4:	01010034 	movhi	r4,1024
 40007a8:	21123e04 	addi	r4,r4,18680
 40007ac:	40004680 	call	4000468 <alt_dev_reg>
}
 40007b0:	0001883a 	nop
 40007b4:	e037883a 	mov	sp,fp
 40007b8:	dfc00117 	ldw	ra,4(sp)
 40007bc:	df000017 	ldw	fp,0(sp)
 40007c0:	dec00204 	addi	sp,sp,8
 40007c4:	f800283a 	ret

040007c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40007c8:	defffa04 	addi	sp,sp,-24
 40007cc:	dfc00515 	stw	ra,20(sp)
 40007d0:	df000415 	stw	fp,16(sp)
 40007d4:	df000404 	addi	fp,sp,16
 40007d8:	e13ffd15 	stw	r4,-12(fp)
 40007dc:	e17ffe15 	stw	r5,-8(fp)
 40007e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40007e4:	e0bffd17 	ldw	r2,-12(fp)
 40007e8:	10800017 	ldw	r2,0(r2)
 40007ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40007f0:	e0bffc17 	ldw	r2,-16(fp)
 40007f4:	10c00a04 	addi	r3,r2,40
 40007f8:	e0bffd17 	ldw	r2,-12(fp)
 40007fc:	10800217 	ldw	r2,8(r2)
 4000800:	100f883a 	mov	r7,r2
 4000804:	e1bfff17 	ldw	r6,-4(fp)
 4000808:	e17ffe17 	ldw	r5,-8(fp)
 400080c:	1809883a 	mov	r4,r3
 4000810:	4000df00 	call	4000df0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4000814:	e037883a 	mov	sp,fp
 4000818:	dfc00117 	ldw	ra,4(sp)
 400081c:	df000017 	ldw	fp,0(sp)
 4000820:	dec00204 	addi	sp,sp,8
 4000824:	f800283a 	ret

04000828 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4000828:	defffa04 	addi	sp,sp,-24
 400082c:	dfc00515 	stw	ra,20(sp)
 4000830:	df000415 	stw	fp,16(sp)
 4000834:	df000404 	addi	fp,sp,16
 4000838:	e13ffd15 	stw	r4,-12(fp)
 400083c:	e17ffe15 	stw	r5,-8(fp)
 4000840:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000844:	e0bffd17 	ldw	r2,-12(fp)
 4000848:	10800017 	ldw	r2,0(r2)
 400084c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000850:	e0bffc17 	ldw	r2,-16(fp)
 4000854:	10c00a04 	addi	r3,r2,40
 4000858:	e0bffd17 	ldw	r2,-12(fp)
 400085c:	10800217 	ldw	r2,8(r2)
 4000860:	100f883a 	mov	r7,r2
 4000864:	e1bfff17 	ldw	r6,-4(fp)
 4000868:	e17ffe17 	ldw	r5,-8(fp)
 400086c:	1809883a 	mov	r4,r3
 4000870:	400100c0 	call	400100c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4000874:	e037883a 	mov	sp,fp
 4000878:	dfc00117 	ldw	ra,4(sp)
 400087c:	df000017 	ldw	fp,0(sp)
 4000880:	dec00204 	addi	sp,sp,8
 4000884:	f800283a 	ret

04000888 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4000888:	defffc04 	addi	sp,sp,-16
 400088c:	dfc00315 	stw	ra,12(sp)
 4000890:	df000215 	stw	fp,8(sp)
 4000894:	df000204 	addi	fp,sp,8
 4000898:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400089c:	e0bfff17 	ldw	r2,-4(fp)
 40008a0:	10800017 	ldw	r2,0(r2)
 40008a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40008a8:	e0bffe17 	ldw	r2,-8(fp)
 40008ac:	10c00a04 	addi	r3,r2,40
 40008b0:	e0bfff17 	ldw	r2,-4(fp)
 40008b4:	10800217 	ldw	r2,8(r2)
 40008b8:	100b883a 	mov	r5,r2
 40008bc:	1809883a 	mov	r4,r3
 40008c0:	4000c980 	call	4000c98 <altera_avalon_jtag_uart_close>
}
 40008c4:	e037883a 	mov	sp,fp
 40008c8:	dfc00117 	ldw	ra,4(sp)
 40008cc:	df000017 	ldw	fp,0(sp)
 40008d0:	dec00204 	addi	sp,sp,8
 40008d4:	f800283a 	ret

040008d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40008d8:	defffa04 	addi	sp,sp,-24
 40008dc:	dfc00515 	stw	ra,20(sp)
 40008e0:	df000415 	stw	fp,16(sp)
 40008e4:	df000404 	addi	fp,sp,16
 40008e8:	e13ffd15 	stw	r4,-12(fp)
 40008ec:	e17ffe15 	stw	r5,-8(fp)
 40008f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40008f4:	e0bffd17 	ldw	r2,-12(fp)
 40008f8:	10800017 	ldw	r2,0(r2)
 40008fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4000900:	e0bffc17 	ldw	r2,-16(fp)
 4000904:	10800a04 	addi	r2,r2,40
 4000908:	e1bfff17 	ldw	r6,-4(fp)
 400090c:	e17ffe17 	ldw	r5,-8(fp)
 4000910:	1009883a 	mov	r4,r2
 4000914:	4000d000 	call	4000d00 <altera_avalon_jtag_uart_ioctl>
}
 4000918:	e037883a 	mov	sp,fp
 400091c:	dfc00117 	ldw	ra,4(sp)
 4000920:	df000017 	ldw	fp,0(sp)
 4000924:	dec00204 	addi	sp,sp,8
 4000928:	f800283a 	ret

0400092c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400092c:	defffa04 	addi	sp,sp,-24
 4000930:	dfc00515 	stw	ra,20(sp)
 4000934:	df000415 	stw	fp,16(sp)
 4000938:	df000404 	addi	fp,sp,16
 400093c:	e13ffd15 	stw	r4,-12(fp)
 4000940:	e17ffe15 	stw	r5,-8(fp)
 4000944:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000948:	e0bffd17 	ldw	r2,-12(fp)
 400094c:	00c00044 	movi	r3,1
 4000950:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4000954:	e0bffd17 	ldw	r2,-12(fp)
 4000958:	10800017 	ldw	r2,0(r2)
 400095c:	10800104 	addi	r2,r2,4
 4000960:	1007883a 	mov	r3,r2
 4000964:	e0bffd17 	ldw	r2,-12(fp)
 4000968:	10800817 	ldw	r2,32(r2)
 400096c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4000970:	e0bffe17 	ldw	r2,-8(fp)
 4000974:	e0ffff17 	ldw	r3,-4(fp)
 4000978:	d8000015 	stw	zero,0(sp)
 400097c:	e1fffd17 	ldw	r7,-12(fp)
 4000980:	01810034 	movhi	r6,1024
 4000984:	31827b04 	addi	r6,r6,2540
 4000988:	180b883a 	mov	r5,r3
 400098c:	1009883a 	mov	r4,r2
 4000990:	400275c0 	call	400275c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4000994:	e0bffd17 	ldw	r2,-12(fp)
 4000998:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400099c:	e0bffd17 	ldw	r2,-12(fp)
 40009a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40009a4:	d0e5bc17 	ldw	r3,-26896(gp)
 40009a8:	e1fffd17 	ldw	r7,-12(fp)
 40009ac:	01810034 	movhi	r6,1024
 40009b0:	3182fe04 	addi	r6,r6,3064
 40009b4:	180b883a 	mov	r5,r3
 40009b8:	1009883a 	mov	r4,r2
 40009bc:	40022800 	call	4002280 <alt_alarm_start>
 40009c0:	1000040e 	bge	r2,zero,40009d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40009c4:	e0fffd17 	ldw	r3,-12(fp)
 40009c8:	00a00034 	movhi	r2,32768
 40009cc:	10bfffc4 	addi	r2,r2,-1
 40009d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40009d4:	0001883a 	nop
 40009d8:	e037883a 	mov	sp,fp
 40009dc:	dfc00117 	ldw	ra,4(sp)
 40009e0:	df000017 	ldw	fp,0(sp)
 40009e4:	dec00204 	addi	sp,sp,8
 40009e8:	f800283a 	ret

040009ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40009ec:	defff804 	addi	sp,sp,-32
 40009f0:	df000715 	stw	fp,28(sp)
 40009f4:	df000704 	addi	fp,sp,28
 40009f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40009fc:	e0bfff17 	ldw	r2,-4(fp)
 4000a00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4000a04:	e0bffb17 	ldw	r2,-20(fp)
 4000a08:	10800017 	ldw	r2,0(r2)
 4000a0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000a10:	e0bffc17 	ldw	r2,-16(fp)
 4000a14:	10800104 	addi	r2,r2,4
 4000a18:	10800037 	ldwio	r2,0(r2)
 4000a1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4000a20:	e0bffd17 	ldw	r2,-12(fp)
 4000a24:	1080c00c 	andi	r2,r2,768
 4000a28:	10006d26 	beq	r2,zero,4000be0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4000a2c:	e0bffd17 	ldw	r2,-12(fp)
 4000a30:	1080400c 	andi	r2,r2,256
 4000a34:	10003526 	beq	r2,zero,4000b0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4000a38:	00800074 	movhi	r2,1
 4000a3c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000a40:	e0bffb17 	ldw	r2,-20(fp)
 4000a44:	10800a17 	ldw	r2,40(r2)
 4000a48:	10800044 	addi	r2,r2,1
 4000a4c:	1081ffcc 	andi	r2,r2,2047
 4000a50:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4000a54:	e0bffb17 	ldw	r2,-20(fp)
 4000a58:	10c00b17 	ldw	r3,44(r2)
 4000a5c:	e0bffe17 	ldw	r2,-8(fp)
 4000a60:	18801526 	beq	r3,r2,4000ab8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4000a64:	e0bffc17 	ldw	r2,-16(fp)
 4000a68:	10800037 	ldwio	r2,0(r2)
 4000a6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4000a70:	e0bff917 	ldw	r2,-28(fp)
 4000a74:	10a0000c 	andi	r2,r2,32768
 4000a78:	10001126 	beq	r2,zero,4000ac0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000a7c:	e0bffb17 	ldw	r2,-20(fp)
 4000a80:	10800a17 	ldw	r2,40(r2)
 4000a84:	e0fff917 	ldw	r3,-28(fp)
 4000a88:	1809883a 	mov	r4,r3
 4000a8c:	e0fffb17 	ldw	r3,-20(fp)
 4000a90:	1885883a 	add	r2,r3,r2
 4000a94:	10800e04 	addi	r2,r2,56
 4000a98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000a9c:	e0bffb17 	ldw	r2,-20(fp)
 4000aa0:	10800a17 	ldw	r2,40(r2)
 4000aa4:	10800044 	addi	r2,r2,1
 4000aa8:	10c1ffcc 	andi	r3,r2,2047
 4000aac:	e0bffb17 	ldw	r2,-20(fp)
 4000ab0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4000ab4:	003fe206 	br	4000a40 <__alt_data_end+0xfc000a40>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4000ab8:	0001883a 	nop
 4000abc:	00000106 	br	4000ac4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4000ac0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4000ac4:	e0bff917 	ldw	r2,-28(fp)
 4000ac8:	10bfffec 	andhi	r2,r2,65535
 4000acc:	10000f26 	beq	r2,zero,4000b0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000ad0:	e0bffb17 	ldw	r2,-20(fp)
 4000ad4:	10c00817 	ldw	r3,32(r2)
 4000ad8:	00bfff84 	movi	r2,-2
 4000adc:	1886703a 	and	r3,r3,r2
 4000ae0:	e0bffb17 	ldw	r2,-20(fp)
 4000ae4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4000ae8:	e0bffc17 	ldw	r2,-16(fp)
 4000aec:	10800104 	addi	r2,r2,4
 4000af0:	1007883a 	mov	r3,r2
 4000af4:	e0bffb17 	ldw	r2,-20(fp)
 4000af8:	10800817 	ldw	r2,32(r2)
 4000afc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000b00:	e0bffc17 	ldw	r2,-16(fp)
 4000b04:	10800104 	addi	r2,r2,4
 4000b08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4000b0c:	e0bffd17 	ldw	r2,-12(fp)
 4000b10:	1080800c 	andi	r2,r2,512
 4000b14:	103fbe26 	beq	r2,zero,4000a10 <__alt_data_end+0xfc000a10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4000b18:	e0bffd17 	ldw	r2,-12(fp)
 4000b1c:	1004d43a 	srli	r2,r2,16
 4000b20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4000b24:	00001406 	br	4000b78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4000b28:	e0bffc17 	ldw	r2,-16(fp)
 4000b2c:	e0fffb17 	ldw	r3,-20(fp)
 4000b30:	18c00d17 	ldw	r3,52(r3)
 4000b34:	e13ffb17 	ldw	r4,-20(fp)
 4000b38:	20c7883a 	add	r3,r4,r3
 4000b3c:	18c20e04 	addi	r3,r3,2104
 4000b40:	18c00003 	ldbu	r3,0(r3)
 4000b44:	18c03fcc 	andi	r3,r3,255
 4000b48:	18c0201c 	xori	r3,r3,128
 4000b4c:	18ffe004 	addi	r3,r3,-128
 4000b50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000b54:	e0bffb17 	ldw	r2,-20(fp)
 4000b58:	10800d17 	ldw	r2,52(r2)
 4000b5c:	10800044 	addi	r2,r2,1
 4000b60:	10c1ffcc 	andi	r3,r2,2047
 4000b64:	e0bffb17 	ldw	r2,-20(fp)
 4000b68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4000b6c:	e0bffa17 	ldw	r2,-24(fp)
 4000b70:	10bfffc4 	addi	r2,r2,-1
 4000b74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4000b78:	e0bffa17 	ldw	r2,-24(fp)
 4000b7c:	10000526 	beq	r2,zero,4000b94 <altera_avalon_jtag_uart_irq+0x1a8>
 4000b80:	e0bffb17 	ldw	r2,-20(fp)
 4000b84:	10c00d17 	ldw	r3,52(r2)
 4000b88:	e0bffb17 	ldw	r2,-20(fp)
 4000b8c:	10800c17 	ldw	r2,48(r2)
 4000b90:	18bfe51e 	bne	r3,r2,4000b28 <__alt_data_end+0xfc000b28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4000b94:	e0bffa17 	ldw	r2,-24(fp)
 4000b98:	103f9d26 	beq	r2,zero,4000a10 <__alt_data_end+0xfc000a10>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000b9c:	e0bffb17 	ldw	r2,-20(fp)
 4000ba0:	10c00817 	ldw	r3,32(r2)
 4000ba4:	00bfff44 	movi	r2,-3
 4000ba8:	1886703a 	and	r3,r3,r2
 4000bac:	e0bffb17 	ldw	r2,-20(fp)
 4000bb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000bb4:	e0bffb17 	ldw	r2,-20(fp)
 4000bb8:	10800017 	ldw	r2,0(r2)
 4000bbc:	10800104 	addi	r2,r2,4
 4000bc0:	1007883a 	mov	r3,r2
 4000bc4:	e0bffb17 	ldw	r2,-20(fp)
 4000bc8:	10800817 	ldw	r2,32(r2)
 4000bcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000bd0:	e0bffc17 	ldw	r2,-16(fp)
 4000bd4:	10800104 	addi	r2,r2,4
 4000bd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4000bdc:	003f8c06 	br	4000a10 <__alt_data_end+0xfc000a10>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4000be0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4000be4:	0001883a 	nop
 4000be8:	e037883a 	mov	sp,fp
 4000bec:	df000017 	ldw	fp,0(sp)
 4000bf0:	dec00104 	addi	sp,sp,4
 4000bf4:	f800283a 	ret

04000bf8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4000bf8:	defff804 	addi	sp,sp,-32
 4000bfc:	df000715 	stw	fp,28(sp)
 4000c00:	df000704 	addi	fp,sp,28
 4000c04:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4000c08:	e0bffb17 	ldw	r2,-20(fp)
 4000c0c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4000c10:	e0bff917 	ldw	r2,-28(fp)
 4000c14:	10800017 	ldw	r2,0(r2)
 4000c18:	10800104 	addi	r2,r2,4
 4000c1c:	10800037 	ldwio	r2,0(r2)
 4000c20:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4000c24:	e0bffa17 	ldw	r2,-24(fp)
 4000c28:	1081000c 	andi	r2,r2,1024
 4000c2c:	10000b26 	beq	r2,zero,4000c5c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4000c30:	e0bff917 	ldw	r2,-28(fp)
 4000c34:	10800017 	ldw	r2,0(r2)
 4000c38:	10800104 	addi	r2,r2,4
 4000c3c:	1007883a 	mov	r3,r2
 4000c40:	e0bff917 	ldw	r2,-28(fp)
 4000c44:	10800817 	ldw	r2,32(r2)
 4000c48:	10810014 	ori	r2,r2,1024
 4000c4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4000c50:	e0bff917 	ldw	r2,-28(fp)
 4000c54:	10000915 	stw	zero,36(r2)
 4000c58:	00000a06 	br	4000c84 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4000c5c:	e0bff917 	ldw	r2,-28(fp)
 4000c60:	10c00917 	ldw	r3,36(r2)
 4000c64:	00a00034 	movhi	r2,32768
 4000c68:	10bfff04 	addi	r2,r2,-4
 4000c6c:	10c00536 	bltu	r2,r3,4000c84 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4000c70:	e0bff917 	ldw	r2,-28(fp)
 4000c74:	10800917 	ldw	r2,36(r2)
 4000c78:	10c00044 	addi	r3,r2,1
 4000c7c:	e0bff917 	ldw	r2,-28(fp)
 4000c80:	10c00915 	stw	r3,36(r2)
 4000c84:	d0a5bc17 	ldw	r2,-26896(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4000c88:	e037883a 	mov	sp,fp
 4000c8c:	df000017 	ldw	fp,0(sp)
 4000c90:	dec00104 	addi	sp,sp,4
 4000c94:	f800283a 	ret

04000c98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4000c98:	defffd04 	addi	sp,sp,-12
 4000c9c:	df000215 	stw	fp,8(sp)
 4000ca0:	df000204 	addi	fp,sp,8
 4000ca4:	e13ffe15 	stw	r4,-8(fp)
 4000ca8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000cac:	00000506 	br	4000cc4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4000cb0:	e0bfff17 	ldw	r2,-4(fp)
 4000cb4:	1090000c 	andi	r2,r2,16384
 4000cb8:	10000226 	beq	r2,zero,4000cc4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4000cbc:	00bffd44 	movi	r2,-11
 4000cc0:	00000b06 	br	4000cf0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000cc4:	e0bffe17 	ldw	r2,-8(fp)
 4000cc8:	10c00d17 	ldw	r3,52(r2)
 4000ccc:	e0bffe17 	ldw	r2,-8(fp)
 4000cd0:	10800c17 	ldw	r2,48(r2)
 4000cd4:	18800526 	beq	r3,r2,4000cec <altera_avalon_jtag_uart_close+0x54>
 4000cd8:	e0bffe17 	ldw	r2,-8(fp)
 4000cdc:	10c00917 	ldw	r3,36(r2)
 4000ce0:	e0bffe17 	ldw	r2,-8(fp)
 4000ce4:	10800117 	ldw	r2,4(r2)
 4000ce8:	18bff136 	bltu	r3,r2,4000cb0 <__alt_data_end+0xfc000cb0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4000cec:	0005883a 	mov	r2,zero
}
 4000cf0:	e037883a 	mov	sp,fp
 4000cf4:	df000017 	ldw	fp,0(sp)
 4000cf8:	dec00104 	addi	sp,sp,4
 4000cfc:	f800283a 	ret

04000d00 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4000d00:	defffa04 	addi	sp,sp,-24
 4000d04:	df000515 	stw	fp,20(sp)
 4000d08:	df000504 	addi	fp,sp,20
 4000d0c:	e13ffd15 	stw	r4,-12(fp)
 4000d10:	e17ffe15 	stw	r5,-8(fp)
 4000d14:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4000d18:	00bff9c4 	movi	r2,-25
 4000d1c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4000d20:	e0bffe17 	ldw	r2,-8(fp)
 4000d24:	10da8060 	cmpeqi	r3,r2,27137
 4000d28:	1800031e 	bne	r3,zero,4000d38 <altera_avalon_jtag_uart_ioctl+0x38>
 4000d2c:	109a80a0 	cmpeqi	r2,r2,27138
 4000d30:	1000181e 	bne	r2,zero,4000d94 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4000d34:	00002906 	br	4000ddc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4000d38:	e0bffd17 	ldw	r2,-12(fp)
 4000d3c:	10c00117 	ldw	r3,4(r2)
 4000d40:	00a00034 	movhi	r2,32768
 4000d44:	10bfffc4 	addi	r2,r2,-1
 4000d48:	18802126 	beq	r3,r2,4000dd0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4000d4c:	e0bfff17 	ldw	r2,-4(fp)
 4000d50:	10800017 	ldw	r2,0(r2)
 4000d54:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4000d58:	e0bffc17 	ldw	r2,-16(fp)
 4000d5c:	10800090 	cmplti	r2,r2,2
 4000d60:	1000061e 	bne	r2,zero,4000d7c <altera_avalon_jtag_uart_ioctl+0x7c>
 4000d64:	e0fffc17 	ldw	r3,-16(fp)
 4000d68:	00a00034 	movhi	r2,32768
 4000d6c:	10bfffc4 	addi	r2,r2,-1
 4000d70:	18800226 	beq	r3,r2,4000d7c <altera_avalon_jtag_uart_ioctl+0x7c>
 4000d74:	e0bffc17 	ldw	r2,-16(fp)
 4000d78:	00000206 	br	4000d84 <altera_avalon_jtag_uart_ioctl+0x84>
 4000d7c:	00a00034 	movhi	r2,32768
 4000d80:	10bfff84 	addi	r2,r2,-2
 4000d84:	e0fffd17 	ldw	r3,-12(fp)
 4000d88:	18800115 	stw	r2,4(r3)
      rc = 0;
 4000d8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4000d90:	00000f06 	br	4000dd0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4000d94:	e0bffd17 	ldw	r2,-12(fp)
 4000d98:	10c00117 	ldw	r3,4(r2)
 4000d9c:	00a00034 	movhi	r2,32768
 4000da0:	10bfffc4 	addi	r2,r2,-1
 4000da4:	18800c26 	beq	r3,r2,4000dd8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4000da8:	e0bffd17 	ldw	r2,-12(fp)
 4000dac:	10c00917 	ldw	r3,36(r2)
 4000db0:	e0bffd17 	ldw	r2,-12(fp)
 4000db4:	10800117 	ldw	r2,4(r2)
 4000db8:	1885803a 	cmpltu	r2,r3,r2
 4000dbc:	10c03fcc 	andi	r3,r2,255
 4000dc0:	e0bfff17 	ldw	r2,-4(fp)
 4000dc4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4000dc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4000dcc:	00000206 	br	4000dd8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4000dd0:	0001883a 	nop
 4000dd4:	00000106 	br	4000ddc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4000dd8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4000ddc:	e0bffb17 	ldw	r2,-20(fp)
}
 4000de0:	e037883a 	mov	sp,fp
 4000de4:	df000017 	ldw	fp,0(sp)
 4000de8:	dec00104 	addi	sp,sp,4
 4000dec:	f800283a 	ret

04000df0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4000df0:	defff304 	addi	sp,sp,-52
 4000df4:	dfc00c15 	stw	ra,48(sp)
 4000df8:	df000b15 	stw	fp,44(sp)
 4000dfc:	df000b04 	addi	fp,sp,44
 4000e00:	e13ffc15 	stw	r4,-16(fp)
 4000e04:	e17ffd15 	stw	r5,-12(fp)
 4000e08:	e1bffe15 	stw	r6,-8(fp)
 4000e0c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4000e10:	e0bffd17 	ldw	r2,-12(fp)
 4000e14:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000e18:	00004706 	br	4000f38 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4000e1c:	e0bffc17 	ldw	r2,-16(fp)
 4000e20:	10800a17 	ldw	r2,40(r2)
 4000e24:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4000e28:	e0bffc17 	ldw	r2,-16(fp)
 4000e2c:	10800b17 	ldw	r2,44(r2)
 4000e30:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4000e34:	e0fff717 	ldw	r3,-36(fp)
 4000e38:	e0bff817 	ldw	r2,-32(fp)
 4000e3c:	18800536 	bltu	r3,r2,4000e54 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4000e40:	e0fff717 	ldw	r3,-36(fp)
 4000e44:	e0bff817 	ldw	r2,-32(fp)
 4000e48:	1885c83a 	sub	r2,r3,r2
 4000e4c:	e0bff615 	stw	r2,-40(fp)
 4000e50:	00000406 	br	4000e64 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4000e54:	00c20004 	movi	r3,2048
 4000e58:	e0bff817 	ldw	r2,-32(fp)
 4000e5c:	1885c83a 	sub	r2,r3,r2
 4000e60:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4000e64:	e0bff617 	ldw	r2,-40(fp)
 4000e68:	10001e26 	beq	r2,zero,4000ee4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4000e6c:	e0fffe17 	ldw	r3,-8(fp)
 4000e70:	e0bff617 	ldw	r2,-40(fp)
 4000e74:	1880022e 	bgeu	r3,r2,4000e80 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4000e78:	e0bffe17 	ldw	r2,-8(fp)
 4000e7c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4000e80:	e0bffc17 	ldw	r2,-16(fp)
 4000e84:	10c00e04 	addi	r3,r2,56
 4000e88:	e0bff817 	ldw	r2,-32(fp)
 4000e8c:	1885883a 	add	r2,r3,r2
 4000e90:	e1bff617 	ldw	r6,-40(fp)
 4000e94:	100b883a 	mov	r5,r2
 4000e98:	e13ff517 	ldw	r4,-44(fp)
 4000e9c:	400335c0 	call	400335c <memcpy>
      ptr   += n;
 4000ea0:	e0fff517 	ldw	r3,-44(fp)
 4000ea4:	e0bff617 	ldw	r2,-40(fp)
 4000ea8:	1885883a 	add	r2,r3,r2
 4000eac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4000eb0:	e0fffe17 	ldw	r3,-8(fp)
 4000eb4:	e0bff617 	ldw	r2,-40(fp)
 4000eb8:	1885c83a 	sub	r2,r3,r2
 4000ebc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000ec0:	e0fff817 	ldw	r3,-32(fp)
 4000ec4:	e0bff617 	ldw	r2,-40(fp)
 4000ec8:	1885883a 	add	r2,r3,r2
 4000ecc:	10c1ffcc 	andi	r3,r2,2047
 4000ed0:	e0bffc17 	ldw	r2,-16(fp)
 4000ed4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4000ed8:	e0bffe17 	ldw	r2,-8(fp)
 4000edc:	00bfcf16 	blt	zero,r2,4000e1c <__alt_data_end+0xfc000e1c>
 4000ee0:	00000106 	br	4000ee8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4000ee4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4000ee8:	e0fff517 	ldw	r3,-44(fp)
 4000eec:	e0bffd17 	ldw	r2,-12(fp)
 4000ef0:	1880141e 	bne	r3,r2,4000f44 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4000ef4:	e0bfff17 	ldw	r2,-4(fp)
 4000ef8:	1090000c 	andi	r2,r2,16384
 4000efc:	1000131e 	bne	r2,zero,4000f4c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4000f00:	0001883a 	nop
 4000f04:	e0bffc17 	ldw	r2,-16(fp)
 4000f08:	10c00a17 	ldw	r3,40(r2)
 4000f0c:	e0bff717 	ldw	r2,-36(fp)
 4000f10:	1880051e 	bne	r3,r2,4000f28 <altera_avalon_jtag_uart_read+0x138>
 4000f14:	e0bffc17 	ldw	r2,-16(fp)
 4000f18:	10c00917 	ldw	r3,36(r2)
 4000f1c:	e0bffc17 	ldw	r2,-16(fp)
 4000f20:	10800117 	ldw	r2,4(r2)
 4000f24:	18bff736 	bltu	r3,r2,4000f04 <__alt_data_end+0xfc000f04>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4000f28:	e0bffc17 	ldw	r2,-16(fp)
 4000f2c:	10c00a17 	ldw	r3,40(r2)
 4000f30:	e0bff717 	ldw	r2,-36(fp)
 4000f34:	18800726 	beq	r3,r2,4000f54 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000f38:	e0bffe17 	ldw	r2,-8(fp)
 4000f3c:	00bfb716 	blt	zero,r2,4000e1c <__alt_data_end+0xfc000e1c>
 4000f40:	00000506 	br	4000f58 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4000f44:	0001883a 	nop
 4000f48:	00000306 	br	4000f58 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4000f4c:	0001883a 	nop
 4000f50:	00000106 	br	4000f58 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4000f54:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4000f58:	e0fff517 	ldw	r3,-44(fp)
 4000f5c:	e0bffd17 	ldw	r2,-12(fp)
 4000f60:	18801826 	beq	r3,r2,4000fc4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000f64:	0005303a 	rdctl	r2,status
 4000f68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000f6c:	e0fffb17 	ldw	r3,-20(fp)
 4000f70:	00bfff84 	movi	r2,-2
 4000f74:	1884703a 	and	r2,r3,r2
 4000f78:	1001703a 	wrctl	status,r2
  
  return context;
 4000f7c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4000f80:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000f84:	e0bffc17 	ldw	r2,-16(fp)
 4000f88:	10800817 	ldw	r2,32(r2)
 4000f8c:	10c00054 	ori	r3,r2,1
 4000f90:	e0bffc17 	ldw	r2,-16(fp)
 4000f94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000f98:	e0bffc17 	ldw	r2,-16(fp)
 4000f9c:	10800017 	ldw	r2,0(r2)
 4000fa0:	10800104 	addi	r2,r2,4
 4000fa4:	1007883a 	mov	r3,r2
 4000fa8:	e0bffc17 	ldw	r2,-16(fp)
 4000fac:	10800817 	ldw	r2,32(r2)
 4000fb0:	18800035 	stwio	r2,0(r3)
 4000fb4:	e0bffa17 	ldw	r2,-24(fp)
 4000fb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000fbc:	e0bff917 	ldw	r2,-28(fp)
 4000fc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4000fc4:	e0fff517 	ldw	r3,-44(fp)
 4000fc8:	e0bffd17 	ldw	r2,-12(fp)
 4000fcc:	18800426 	beq	r3,r2,4000fe0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4000fd0:	e0fff517 	ldw	r3,-44(fp)
 4000fd4:	e0bffd17 	ldw	r2,-12(fp)
 4000fd8:	1885c83a 	sub	r2,r3,r2
 4000fdc:	00000606 	br	4000ff8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4000fe0:	e0bfff17 	ldw	r2,-4(fp)
 4000fe4:	1090000c 	andi	r2,r2,16384
 4000fe8:	10000226 	beq	r2,zero,4000ff4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4000fec:	00bffd44 	movi	r2,-11
 4000ff0:	00000106 	br	4000ff8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4000ff4:	00bffec4 	movi	r2,-5
}
 4000ff8:	e037883a 	mov	sp,fp
 4000ffc:	dfc00117 	ldw	ra,4(sp)
 4001000:	df000017 	ldw	fp,0(sp)
 4001004:	dec00204 	addi	sp,sp,8
 4001008:	f800283a 	ret

0400100c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400100c:	defff304 	addi	sp,sp,-52
 4001010:	dfc00c15 	stw	ra,48(sp)
 4001014:	df000b15 	stw	fp,44(sp)
 4001018:	df000b04 	addi	fp,sp,44
 400101c:	e13ffc15 	stw	r4,-16(fp)
 4001020:	e17ffd15 	stw	r5,-12(fp)
 4001024:	e1bffe15 	stw	r6,-8(fp)
 4001028:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400102c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4001030:	e0bffd17 	ldw	r2,-12(fp)
 4001034:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4001038:	00003706 	br	4001118 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400103c:	e0bffc17 	ldw	r2,-16(fp)
 4001040:	10800c17 	ldw	r2,48(r2)
 4001044:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4001048:	e0bffc17 	ldw	r2,-16(fp)
 400104c:	10800d17 	ldw	r2,52(r2)
 4001050:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4001054:	e0fff917 	ldw	r3,-28(fp)
 4001058:	e0bff517 	ldw	r2,-44(fp)
 400105c:	1880062e 	bgeu	r3,r2,4001078 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4001060:	e0fff517 	ldw	r3,-44(fp)
 4001064:	e0bff917 	ldw	r2,-28(fp)
 4001068:	1885c83a 	sub	r2,r3,r2
 400106c:	10bfffc4 	addi	r2,r2,-1
 4001070:	e0bff615 	stw	r2,-40(fp)
 4001074:	00000b06 	br	40010a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4001078:	e0bff517 	ldw	r2,-44(fp)
 400107c:	10000526 	beq	r2,zero,4001094 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4001080:	00c20004 	movi	r3,2048
 4001084:	e0bff917 	ldw	r2,-28(fp)
 4001088:	1885c83a 	sub	r2,r3,r2
 400108c:	e0bff615 	stw	r2,-40(fp)
 4001090:	00000406 	br	40010a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4001094:	00c1ffc4 	movi	r3,2047
 4001098:	e0bff917 	ldw	r2,-28(fp)
 400109c:	1885c83a 	sub	r2,r3,r2
 40010a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40010a4:	e0bff617 	ldw	r2,-40(fp)
 40010a8:	10001e26 	beq	r2,zero,4001124 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40010ac:	e0fffe17 	ldw	r3,-8(fp)
 40010b0:	e0bff617 	ldw	r2,-40(fp)
 40010b4:	1880022e 	bgeu	r3,r2,40010c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40010b8:	e0bffe17 	ldw	r2,-8(fp)
 40010bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40010c0:	e0bffc17 	ldw	r2,-16(fp)
 40010c4:	10c20e04 	addi	r3,r2,2104
 40010c8:	e0bff917 	ldw	r2,-28(fp)
 40010cc:	1885883a 	add	r2,r3,r2
 40010d0:	e1bff617 	ldw	r6,-40(fp)
 40010d4:	e17ffd17 	ldw	r5,-12(fp)
 40010d8:	1009883a 	mov	r4,r2
 40010dc:	400335c0 	call	400335c <memcpy>
      ptr   += n;
 40010e0:	e0fffd17 	ldw	r3,-12(fp)
 40010e4:	e0bff617 	ldw	r2,-40(fp)
 40010e8:	1885883a 	add	r2,r3,r2
 40010ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40010f0:	e0fffe17 	ldw	r3,-8(fp)
 40010f4:	e0bff617 	ldw	r2,-40(fp)
 40010f8:	1885c83a 	sub	r2,r3,r2
 40010fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4001100:	e0fff917 	ldw	r3,-28(fp)
 4001104:	e0bff617 	ldw	r2,-40(fp)
 4001108:	1885883a 	add	r2,r3,r2
 400110c:	10c1ffcc 	andi	r3,r2,2047
 4001110:	e0bffc17 	ldw	r2,-16(fp)
 4001114:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4001118:	e0bffe17 	ldw	r2,-8(fp)
 400111c:	00bfc716 	blt	zero,r2,400103c <__alt_data_end+0xfc00103c>
 4001120:	00000106 	br	4001128 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4001124:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001128:	0005303a 	rdctl	r2,status
 400112c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001130:	e0fffb17 	ldw	r3,-20(fp)
 4001134:	00bfff84 	movi	r2,-2
 4001138:	1884703a 	and	r2,r3,r2
 400113c:	1001703a 	wrctl	status,r2
  
  return context;
 4001140:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4001144:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4001148:	e0bffc17 	ldw	r2,-16(fp)
 400114c:	10800817 	ldw	r2,32(r2)
 4001150:	10c00094 	ori	r3,r2,2
 4001154:	e0bffc17 	ldw	r2,-16(fp)
 4001158:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400115c:	e0bffc17 	ldw	r2,-16(fp)
 4001160:	10800017 	ldw	r2,0(r2)
 4001164:	10800104 	addi	r2,r2,4
 4001168:	1007883a 	mov	r3,r2
 400116c:	e0bffc17 	ldw	r2,-16(fp)
 4001170:	10800817 	ldw	r2,32(r2)
 4001174:	18800035 	stwio	r2,0(r3)
 4001178:	e0bffa17 	ldw	r2,-24(fp)
 400117c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001180:	e0bff817 	ldw	r2,-32(fp)
 4001184:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4001188:	e0bffe17 	ldw	r2,-8(fp)
 400118c:	0080100e 	bge	zero,r2,40011d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4001190:	e0bfff17 	ldw	r2,-4(fp)
 4001194:	1090000c 	andi	r2,r2,16384
 4001198:	1000101e 	bne	r2,zero,40011dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400119c:	0001883a 	nop
 40011a0:	e0bffc17 	ldw	r2,-16(fp)
 40011a4:	10c00d17 	ldw	r3,52(r2)
 40011a8:	e0bff517 	ldw	r2,-44(fp)
 40011ac:	1880051e 	bne	r3,r2,40011c4 <altera_avalon_jtag_uart_write+0x1b8>
 40011b0:	e0bffc17 	ldw	r2,-16(fp)
 40011b4:	10c00917 	ldw	r3,36(r2)
 40011b8:	e0bffc17 	ldw	r2,-16(fp)
 40011bc:	10800117 	ldw	r2,4(r2)
 40011c0:	18bff736 	bltu	r3,r2,40011a0 <__alt_data_end+0xfc0011a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40011c4:	e0bffc17 	ldw	r2,-16(fp)
 40011c8:	10800917 	ldw	r2,36(r2)
 40011cc:	1000051e 	bne	r2,zero,40011e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40011d0:	e0bffe17 	ldw	r2,-8(fp)
 40011d4:	00bfd016 	blt	zero,r2,4001118 <__alt_data_end+0xfc001118>
 40011d8:	00000306 	br	40011e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 40011dc:	0001883a 	nop
 40011e0:	00000106 	br	40011e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 40011e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40011e8:	e0fffd17 	ldw	r3,-12(fp)
 40011ec:	e0bff717 	ldw	r2,-36(fp)
 40011f0:	18800426 	beq	r3,r2,4001204 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 40011f4:	e0fffd17 	ldw	r3,-12(fp)
 40011f8:	e0bff717 	ldw	r2,-36(fp)
 40011fc:	1885c83a 	sub	r2,r3,r2
 4001200:	00000606 	br	400121c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4001204:	e0bfff17 	ldw	r2,-4(fp)
 4001208:	1090000c 	andi	r2,r2,16384
 400120c:	10000226 	beq	r2,zero,4001218 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4001210:	00bffd44 	movi	r2,-11
 4001214:	00000106 	br	400121c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4001218:	00bffec4 	movi	r2,-5
}
 400121c:	e037883a 	mov	sp,fp
 4001220:	dfc00117 	ldw	ra,4(sp)
 4001224:	df000017 	ldw	fp,0(sp)
 4001228:	dec00204 	addi	sp,sp,8
 400122c:	f800283a 	ret

04001230 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4001230:	defffa04 	addi	sp,sp,-24
 4001234:	dfc00515 	stw	ra,20(sp)
 4001238:	df000415 	stw	fp,16(sp)
 400123c:	df000404 	addi	fp,sp,16
 4001240:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4001244:	0007883a 	mov	r3,zero
 4001248:	e0bfff17 	ldw	r2,-4(fp)
 400124c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4001250:	e0bfff17 	ldw	r2,-4(fp)
 4001254:	10800104 	addi	r2,r2,4
 4001258:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400125c:	0005303a 	rdctl	r2,status
 4001260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001264:	e0fffd17 	ldw	r3,-12(fp)
 4001268:	00bfff84 	movi	r2,-2
 400126c:	1884703a 	and	r2,r3,r2
 4001270:	1001703a 	wrctl	status,r2
  
  return context;
 4001274:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4001278:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 400127c:	4002f000 	call	4002f00 <alt_tick>
 4001280:	e0bffc17 	ldw	r2,-16(fp)
 4001284:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001288:	e0bffe17 	ldw	r2,-8(fp)
 400128c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4001290:	0001883a 	nop
 4001294:	e037883a 	mov	sp,fp
 4001298:	dfc00117 	ldw	ra,4(sp)
 400129c:	df000017 	ldw	fp,0(sp)
 40012a0:	dec00204 	addi	sp,sp,8
 40012a4:	f800283a 	ret

040012a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40012a8:	defff804 	addi	sp,sp,-32
 40012ac:	dfc00715 	stw	ra,28(sp)
 40012b0:	df000615 	stw	fp,24(sp)
 40012b4:	df000604 	addi	fp,sp,24
 40012b8:	e13ffc15 	stw	r4,-16(fp)
 40012bc:	e17ffd15 	stw	r5,-12(fp)
 40012c0:	e1bffe15 	stw	r6,-8(fp)
 40012c4:	e1ffff15 	stw	r7,-4(fp)
 40012c8:	e0bfff17 	ldw	r2,-4(fp)
 40012cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40012d0:	d0a5bc17 	ldw	r2,-26896(gp)
 40012d4:	1000021e 	bne	r2,zero,40012e0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 40012d8:	e0bffb17 	ldw	r2,-20(fp)
 40012dc:	d0a5bc15 	stw	r2,-26896(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 40012e0:	e0bffc17 	ldw	r2,-16(fp)
 40012e4:	10800104 	addi	r2,r2,4
 40012e8:	00c001c4 	movi	r3,7
 40012ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 40012f0:	d8000015 	stw	zero,0(sp)
 40012f4:	e1fffc17 	ldw	r7,-16(fp)
 40012f8:	01810034 	movhi	r6,1024
 40012fc:	31848c04 	addi	r6,r6,4656
 4001300:	e17ffe17 	ldw	r5,-8(fp)
 4001304:	e13ffd17 	ldw	r4,-12(fp)
 4001308:	400275c0 	call	400275c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400130c:	0001883a 	nop
 4001310:	e037883a 	mov	sp,fp
 4001314:	dfc00117 	ldw	ra,4(sp)
 4001318:	df000017 	ldw	fp,0(sp)
 400131c:	dec00204 	addi	sp,sp,8
 4001320:	f800283a 	ret

04001324 <alt_up_video_dma_open_dev>:
void alt_up_video_dma_draw_hline(alt_up_video_dma_dev *video_dma, register unsigned int symbol, register unsigned int x0, register unsigned int x1, register unsigned int y, int backbuffer);
void alt_up_video_dma_draw_vline(alt_up_video_dma_dev *video_dma, register unsigned int symbol, register unsigned int x, register unsigned int y0, register unsigned int y1, int backbuffer);
void alt_up_video_dma_draw_rectangle(alt_up_video_dma_dev *video_dma, register unsigned int symbol, register unsigned int x0, register unsigned int y0, register unsigned int x1, register unsigned int y1, int backbuffer);
void alt_up_video_dma_draw_helper(register unsigned int buffer_start, register unsigned int offset, register unsigned int symbol, register unsigned int data_width);

alt_up_video_dma_dev* alt_up_video_dma_open_dev(const char* name) {
 4001324:	defffc04 	addi	sp,sp,-16
 4001328:	dfc00315 	stw	ra,12(sp)
 400132c:	df000215 	stw	fp,8(sp)
 4001330:	df000204 	addi	fp,sp,8
 4001334:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_video_dma_dev *dev = (alt_up_video_dma_dev*)alt_find_dev(name, &alt_dev_list);
 4001338:	d1600204 	addi	r5,gp,-32760
 400133c:	e13fff17 	ldw	r4,-4(fp)
 4001340:	40026ac0 	call	40026ac <alt_find_dev>
 4001344:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4001348:	e0bffe17 	ldw	r2,-8(fp)
}
 400134c:	e037883a 	mov	sp,fp
 4001350:	dfc00117 	ldw	ra,4(sp)
 4001354:	df000017 	ldw	fp,0(sp)
 4001358:	dec00204 	addi	sp,sp,8
 400135c:	f800283a 	ret

04001360 <alt_up_video_dma_ctrl_set_bb_addr>:

int alt_up_video_dma_ctrl_set_bb_addr(alt_up_video_dma_dev *video_dma, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 4001360:	defffd04 	addi	sp,sp,-12
 4001364:	df000215 	stw	fp,8(sp)
 4001368:	df000204 	addi	fp,sp,8
 400136c:	e13ffe15 	stw	r4,-8(fp)
 4001370:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(video_dma->base, 4, new_address);
 4001374:	e0bffe17 	ldw	r2,-8(fp)
 4001378:	10800a17 	ldw	r2,40(r2)
 400137c:	10800104 	addi	r2,r2,4
 4001380:	1007883a 	mov	r3,r2
 4001384:	e0bfff17 	ldw	r2,-4(fp)
 4001388:	18800035 	stwio	r2,0(r3)
	video_dma->back_buffer_start_address = IORD_32DIRECT(video_dma->base, 4);
 400138c:	e0bffe17 	ldw	r2,-8(fp)
 4001390:	10800a17 	ldw	r2,40(r2)
 4001394:	10800104 	addi	r2,r2,4
 4001398:	10800037 	ldwio	r2,0(r2)
 400139c:	1007883a 	mov	r3,r2
 40013a0:	e0bffe17 	ldw	r2,-8(fp)
 40013a4:	10c00c15 	stw	r3,48(r2)
	return 0;
 40013a8:	0005883a 	mov	r2,zero
}
 40013ac:	e037883a 	mov	sp,fp
 40013b0:	df000017 	ldw	fp,0(sp)
 40013b4:	dec00104 	addi	sp,sp,4
 40013b8:	f800283a 	ret

040013bc <alt_up_video_dma_ctrl_swap_buffers>:

int alt_up_video_dma_ctrl_swap_buffers(alt_up_video_dma_dev *video_dma)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 40013bc:	defffd04 	addi	sp,sp,-12
 40013c0:	df000215 	stw	fp,8(sp)
 40013c4:	dc000115 	stw	r16,4(sp)
 40013c8:	df000204 	addi	fp,sp,8
 40013cc:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = video_dma->back_buffer_start_address;
 40013d0:	e0bffe17 	ldw	r2,-8(fp)
 40013d4:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(video_dma->base, 0, 1);
 40013d8:	e0bffe17 	ldw	r2,-8(fp)
 40013dc:	10800a17 	ldw	r2,40(r2)
 40013e0:	1007883a 	mov	r3,r2
 40013e4:	00800044 	movi	r2,1
 40013e8:	18800035 	stwio	r2,0(r3)
	video_dma->back_buffer_start_address = video_dma->buffer_start_address;
 40013ec:	e0bffe17 	ldw	r2,-8(fp)
 40013f0:	10c00b17 	ldw	r3,44(r2)
 40013f4:	e0bffe17 	ldw	r2,-8(fp)
 40013f8:	10c00c15 	stw	r3,48(r2)
	video_dma->buffer_start_address = temp;
 40013fc:	e0bffe17 	ldw	r2,-8(fp)
 4001400:	14000b15 	stw	r16,44(r2)
	return 0;
 4001404:	0005883a 	mov	r2,zero
}
 4001408:	e6ffff04 	addi	sp,fp,-4
 400140c:	df000117 	ldw	fp,4(sp)
 4001410:	dc000017 	ldw	r16,0(sp)
 4001414:	dec00204 	addi	sp,sp,8
 4001418:	f800283a 	ret

0400141c <alt_up_video_dma_ctrl_check_swap_status>:
int alt_up_video_dma_ctrl_check_swap_status(alt_up_video_dma_dev *video_dma)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_video_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 400141c:	defffe04 	addi	sp,sp,-8
 4001420:	df000115 	stw	fp,4(sp)
 4001424:	df000104 	addi	fp,sp,4
 4001428:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(video_dma->base, 12) & 0x1);
 400142c:	e0bfff17 	ldw	r2,-4(fp)
 4001430:	10800a17 	ldw	r2,40(r2)
 4001434:	10800304 	addi	r2,r2,12
 4001438:	10800037 	ldwio	r2,0(r2)
 400143c:	1080004c 	andi	r2,r2,1
}
 4001440:	e037883a 	mov	sp,fp
 4001444:	df000017 	ldw	fp,0(sp)
 4001448:	dec00104 	addi	sp,sp,4
 400144c:	f800283a 	ret

04001450 <alt_up_video_dma_draw>:

int alt_up_video_dma_draw(alt_up_video_dma_dev *video_dma, unsigned int symbol, unsigned int x, unsigned int y, int backbuffer)
/* This function draws a pixel to either the front or back buffer. */
{
 4001450:	defff404 	addi	sp,sp,-48
 4001454:	dfc00b15 	stw	ra,44(sp)
 4001458:	df000a15 	stw	fp,40(sp)
 400145c:	dd400915 	stw	r21,36(sp)
 4001460:	dd000815 	stw	r20,32(sp)
 4001464:	dcc00715 	stw	r19,28(sp)
 4001468:	dc800615 	stw	r18,24(sp)
 400146c:	dc400515 	stw	r17,20(sp)
 4001470:	dc000415 	stw	r16,16(sp)
 4001474:	df000a04 	addi	fp,sp,40
 4001478:	e13ff615 	stw	r4,-40(fp)
 400147c:	e17ff715 	stw	r5,-36(fp)
 4001480:	e1bff815 	stw	r6,-32(fp)
 4001484:	e1fff915 	stw	r7,-28(fp)
	register unsigned int addr;
	register unsigned int offset = 0;
 4001488:	0021883a 	mov	r16,zero
	register unsigned int limit_x = video_dma->x_resolution;
 400148c:	e0bff617 	ldw	r2,-40(fp)
 4001490:	15001117 	ldw	r20,68(r2)
	register unsigned int limit_y = video_dma->y_resolution;
 4001494:	e0bff617 	ldw	r2,-40(fp)
 4001498:	14c01217 	ldw	r19,72(r2)
	register unsigned int local_x = x;
 400149c:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_y = y;
 40014a0:	e47ff917 	ldw	r17,-28(fp)
	register unsigned int local_symbol = symbol;
 40014a4:	e57ff717 	ldw	r21,-36(fp)

	// boundary check
	if (local_x >= limit_x || local_y >= limit_y )
 40014a8:	9500012e 	bgeu	r18,r20,40014b0 <alt_up_video_dma_draw+0x60>
 40014ac:	8cc00236 	bltu	r17,r19,40014b8 <alt_up_video_dma_draw+0x68>
		return -1;
 40014b0:	00bfffc4 	movi	r2,-1
 40014b4:	00003806 	br	4001598 <alt_up_video_dma_draw+0x148>

	/* Set up the start address of the chosen frame buffer. */
	if (backbuffer == 1)
 40014b8:	e0800217 	ldw	r2,8(fp)
 40014bc:	10800058 	cmpnei	r2,r2,1
 40014c0:	1000031e 	bne	r2,zero,40014d0 <alt_up_video_dma_draw+0x80>
		addr = video_dma->back_buffer_start_address;
 40014c4:	e0bff617 	ldw	r2,-40(fp)
 40014c8:	14c00c17 	ldw	r19,48(r2)
 40014cc:	00000206 	br	40014d8 <alt_up_video_dma_draw+0x88>
	else
		addr = video_dma->buffer_start_address;
 40014d0:	e0bff617 	ldw	r2,-40(fp)
 40014d4:	14c00b17 	ldw	r19,44(r2)

	/* Check the mode VGA Pixel Buffer is using. */
	if (video_dma->addressing_mode == ALT_UP_VIDEO_DMA_XY_ADDRESS_MODE) {
 40014d8:	e0bff617 	ldw	r2,-40(fp)
 40014dc:	10800d17 	ldw	r2,52(r2)
 40014e0:	10000f1e 	bne	r2,zero,4001520 <alt_up_video_dma_draw+0xd0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		offset += ((local_x & video_dma->x_coord_mask) << video_dma->x_coord_offset);
 40014e4:	e0bff617 	ldw	r2,-40(fp)
 40014e8:	10801417 	ldw	r2,80(r2)
 40014ec:	1486703a 	and	r3,r2,r18
 40014f0:	e0bff617 	ldw	r2,-40(fp)
 40014f4:	10801317 	ldw	r2,76(r2)
 40014f8:	1884983a 	sll	r2,r3,r2
 40014fc:	80a1883a 	add	r16,r16,r2
		offset += ((local_y & video_dma->y_coord_mask) << video_dma->y_coord_offset);
 4001500:	e0bff617 	ldw	r2,-40(fp)
 4001504:	10801617 	ldw	r2,88(r2)
 4001508:	1446703a 	and	r3,r2,r17
 400150c:	e0bff617 	ldw	r2,-40(fp)
 4001510:	10801517 	ldw	r2,84(r2)
 4001514:	1884983a 	sll	r2,r3,r2
 4001518:	80a1883a 	add	r16,r16,r2
 400151c:	00001606 	br	4001578 <alt_up_video_dma_draw+0x128>

	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		offset += ((x & video_dma->x_coord_mask) << video_dma->x_coord_offset);
 4001520:	e0bff617 	ldw	r2,-40(fp)
 4001524:	10c01417 	ldw	r3,80(r2)
 4001528:	e0bff817 	ldw	r2,-32(fp)
 400152c:	1886703a 	and	r3,r3,r2
 4001530:	e0bff617 	ldw	r2,-40(fp)
 4001534:	10801317 	ldw	r2,76(r2)
 4001538:	1884983a 	sll	r2,r3,r2
 400153c:	80a1883a 	add	r16,r16,r2
		offset += (((y & video_dma->y_coord_mask) * video_dma->x_resolution) << video_dma->x_coord_offset);
 4001540:	e0bff617 	ldw	r2,-40(fp)
 4001544:	10c01617 	ldw	r3,88(r2)
 4001548:	e0bff917 	ldw	r2,-28(fp)
 400154c:	1886703a 	and	r3,r3,r2
 4001550:	e0bff617 	ldw	r2,-40(fp)
 4001554:	10801117 	ldw	r2,68(r2)
 4001558:	100b883a 	mov	r5,r2
 400155c:	1809883a 	mov	r4,r3
 4001560:	40037d40 	call	40037d4 <__mulsi3>
 4001564:	1007883a 	mov	r3,r2
 4001568:	e0bff617 	ldw	r2,-40(fp)
 400156c:	10801317 	ldw	r2,76(r2)
 4001570:	1884983a 	sll	r2,r3,r2
 4001574:	80a1883a 	add	r16,r16,r2
	}

	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	alt_up_video_dma_draw_helper(addr, offset, local_symbol, video_dma->data_width);
 4001578:	e0bff617 	ldw	r2,-40(fp)
 400157c:	10801017 	ldw	r2,64(r2)
 4001580:	100f883a 	mov	r7,r2
 4001584:	a80d883a 	mov	r6,r21
 4001588:	800b883a 	mov	r5,r16
 400158c:	9809883a 	mov	r4,r19
 4001590:	40022180 	call	4002218 <alt_up_video_dma_draw_helper>

	return 0;
 4001594:	0005883a 	mov	r2,zero
}
 4001598:	e6fffa04 	addi	sp,fp,-24
 400159c:	dfc00717 	ldw	ra,28(sp)
 40015a0:	df000617 	ldw	fp,24(sp)
 40015a4:	dd400517 	ldw	r21,20(sp)
 40015a8:	dd000417 	ldw	r20,16(sp)
 40015ac:	dcc00317 	ldw	r19,12(sp)
 40015b0:	dc800217 	ldw	r18,8(sp)
 40015b4:	dc400117 	ldw	r17,4(sp)
 40015b8:	dc000017 	ldw	r16,0(sp)
 40015bc:	dec00804 	addi	sp,sp,32
 40015c0:	f800283a 	ret

040015c4 <alt_up_video_dma_draw_box>:

int alt_up_video_dma_draw_box(alt_up_video_dma_dev *video_dma, unsigned int symbol, unsigned int x0, unsigned int y0, unsigned int x1, unsigned int y1, int backbuffer, int fill)
/* This function draws a box. */
{
 40015c4:	deffef04 	addi	sp,sp,-68
 40015c8:	dfc01015 	stw	ra,64(sp)
 40015cc:	df000f15 	stw	fp,60(sp)
 40015d0:	ddc00e15 	stw	r23,56(sp)
 40015d4:	dd800d15 	stw	r22,52(sp)
 40015d8:	dd400c15 	stw	r21,48(sp)
 40015dc:	dd000b15 	stw	r20,44(sp)
 40015e0:	dcc00a15 	stw	r19,40(sp)
 40015e4:	dc800915 	stw	r18,36(sp)
 40015e8:	dc400815 	stw	r17,32(sp)
 40015ec:	dc000715 	stw	r16,28(sp)
 40015f0:	df000f04 	addi	fp,sp,60
 40015f4:	e13ff415 	stw	r4,-48(fp)
 40015f8:	e17ff515 	stw	r5,-44(fp)
 40015fc:	e1bff615 	stw	r6,-40(fp)
 4001600:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = video_dma->x_resolution;
 4001604:	e0bff417 	ldw	r2,-48(fp)
 4001608:	14801117 	ldw	r18,68(r2)
	register unsigned int limit_y = video_dma->y_resolution;
 400160c:	e0bff417 	ldw	r2,-48(fp)
 4001610:	14001217 	ldw	r16,72(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4001614:	e5bff617 	ldw	r22,-40(fp)
	register unsigned int r_x = x1;
 4001618:	e5000217 	ldw	r20,8(fp)
	register unsigned int t_y = y0;
 400161c:	e47ff717 	ldw	r17,-36(fp)
	register unsigned int b_y = y1;
 4001620:	e4c00317 	ldw	r19,12(fp)
	register unsigned int local_symbol = symbol;
 4001624:	e5fff517 	ldw	r23,-44(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4001628:	a580032e 	bgeu	r20,r22,4001638 <alt_up_video_dma_draw_box+0x74>
	{
		temp = l_x;
 400162c:	b02b883a 	mov	r21,r22
		l_x = r_x;
 4001630:	a02d883a 	mov	r22,r20
		r_x = temp;
 4001634:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 4001638:	9c40032e 	bgeu	r19,r17,4001648 <alt_up_video_dma_draw_box+0x84>
	{
		temp = t_y;
 400163c:	882b883a 	mov	r21,r17
		t_y = b_y;
 4001640:	9823883a 	mov	r17,r19
		b_y = temp;
 4001644:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y))
 4001648:	b480012e 	bgeu	r22,r18,4001650 <alt_up_video_dma_draw_box+0x8c>
 400164c:	8c000236 	bltu	r17,r16,4001658 <alt_up_video_dma_draw_box+0x94>
	{
		/* Drawing outside of the window, so don't bother. */
		return -1;
 4001650:	00bfffc4 	movi	r2,-1
 4001654:	00009b06 	br	40018c4 <alt_up_video_dma_draw_box+0x300>
	}
	/* Clip the box and draw only within the confines of the screen. */
	if (r_x >= limit_x)
 4001658:	a4800136 	bltu	r20,r18,4001660 <alt_up_video_dma_draw_box+0x9c>
	{
		r_x = limit_x - 1;
 400165c:	953fffc4 	addi	r20,r18,-1
	}
	if (b_y >= limit_y)
 4001660:	9c000136 	bltu	r19,r16,4001668 <alt_up_video_dma_draw_box+0xa4>
	{
		b_y = limit_y - 1;
 4001664:	84ffffc4 	addi	r19,r16,-1
	}

	if (fill == 0) {
 4001668:	e0800517 	ldw	r2,20(fp)
 400166c:	10000b1e 	bne	r2,zero,400169c <alt_up_video_dma_draw_box+0xd8>
		alt_up_video_dma_draw_rectangle(video_dma, local_symbol, l_x, t_y, r_x, b_y, backbuffer);
 4001670:	e0800417 	ldw	r2,16(fp)
 4001674:	d8800215 	stw	r2,8(sp)
 4001678:	dcc00115 	stw	r19,4(sp)
 400167c:	dd000015 	stw	r20,0(sp)
 4001680:	880f883a 	mov	r7,r17
 4001684:	b00d883a 	mov	r6,r22
 4001688:	b80b883a 	mov	r5,r23
 400168c:	e13ff417 	ldw	r4,-48(fp)
 4001690:	400213c0 	call	400213c <alt_up_video_dma_draw_rectangle>
		return 0;
 4001694:	0005883a 	mov	r2,zero
 4001698:	00008a06 	br	40018c4 <alt_up_video_dma_draw_box+0x300>
	}

	/* Set up the start address of the chosen frame buffer. */
	if (backbuffer == 1)
 400169c:	e0800417 	ldw	r2,16(fp)
 40016a0:	10800058 	cmpnei	r2,r2,1
 40016a4:	1000031e 	bne	r2,zero,40016b4 <alt_up_video_dma_draw_box+0xf0>
		addr = video_dma->back_buffer_start_address;
 40016a8:	e0bff417 	ldw	r2,-48(fp)
 40016ac:	14000c17 	ldw	r16,48(r2)
 40016b0:	00000206 	br	40016bc <alt_up_video_dma_draw_box+0xf8>
	else
		addr = video_dma->buffer_start_address;
 40016b4:	e0bff417 	ldw	r2,-48(fp)
 40016b8:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (video_dma->addressing_mode == ALT_UP_VIDEO_DMA_XY_ADDRESS_MODE) {
 40016bc:	e0bff417 	ldw	r2,-48(fp)
 40016c0:	10800d17 	ldw	r2,52(r2)
 40016c4:	10003c1e 	bne	r2,zero,40017b8 <alt_up_video_dma_draw_box+0x1f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = video_dma->y_coord_offset;
 40016c8:	e0bff417 	ldw	r2,-48(fp)
 40016cc:	15401517 	ldw	r21,84(r2)
		addr = addr + (t_y << offset_y);
 40016d0:	8d44983a 	sll	r2,r17,r21
 40016d4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a test for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (video_dma->data_width == 1) {
 40016d8:	e0bff417 	ldw	r2,-48(fp)
 40016dc:	10801017 	ldw	r2,64(r2)
 40016e0:	10800058 	cmpnei	r2,r2,1
 40016e4:	10000f1e 	bne	r2,zero,4001724 <alt_up_video_dma_draw_box+0x160>
			for (y = t_y; y <= b_y; y++)
 40016e8:	8825883a 	mov	r18,r17
 40016ec:	00000b06 	br	400171c <alt_up_video_dma_draw_box+0x158>
			{
				for (x = l_x; x <= r_x; x++)
 40016f0:	b023883a 	mov	r17,r22
 40016f4:	00000406 	br	4001708 <alt_up_video_dma_draw_box+0x144>
				{
					IOWR_8DIRECT(addr, x, local_symbol);
 40016f8:	8c05883a 	add	r2,r17,r16
 40016fc:	b807883a 	mov	r3,r23
 4001700:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a test for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (video_dma->data_width == 1) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001704:	8c400044 	addi	r17,r17,1
 4001708:	a47ffb2e 	bgeu	r20,r17,40016f8 <__alt_data_end+0xfc0016f8>
				{
					IOWR_8DIRECT(addr, x, local_symbol);
				}
				addr = addr + (1 << offset_y);
 400170c:	00800044 	movi	r2,1
 4001710:	1544983a 	sll	r2,r2,r21
 4001714:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a test for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (video_dma->data_width == 1) {
			for (y = t_y; y <= b_y; y++)
 4001718:	94800044 	addi	r18,r18,1
 400171c:	9cbff42e 	bgeu	r19,r18,40016f0 <__alt_data_end+0xfc0016f0>
 4001720:	00006706 	br	40018c0 <alt_up_video_dma_draw_box+0x2fc>
				{
					IOWR_8DIRECT(addr, x, local_symbol);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (video_dma->data_width == 2) {
 4001724:	e0bff417 	ldw	r2,-48(fp)
 4001728:	10801017 	ldw	r2,64(r2)
 400172c:	10800098 	cmpnei	r2,r2,2
 4001730:	1000101e 	bne	r2,zero,4001774 <alt_up_video_dma_draw_box+0x1b0>
			for (y = t_y; y <= b_y; y++)
 4001734:	8825883a 	mov	r18,r17
 4001738:	00000c06 	br	400176c <alt_up_video_dma_draw_box+0x1a8>
			{
				for (x = l_x; x <= r_x; x++)
 400173c:	b023883a 	mov	r17,r22
 4001740:	00000506 	br	4001758 <alt_up_video_dma_draw_box+0x194>
				{
					IOWR_16DIRECT(addr, x << 1, local_symbol);
 4001744:	8c45883a 	add	r2,r17,r17
 4001748:	1405883a 	add	r2,r2,r16
 400174c:	b807883a 	mov	r3,r23
 4001750:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (video_dma->data_width == 2) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001754:	8c400044 	addi	r17,r17,1
 4001758:	a47ffa2e 	bgeu	r20,r17,4001744 <__alt_data_end+0xfc001744>
				{
					IOWR_16DIRECT(addr, x << 1, local_symbol);
				}
				addr = addr + (1 << offset_y);
 400175c:	00800044 	movi	r2,1
 4001760:	1544983a 	sll	r2,r2,r21
 4001764:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_symbol);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (video_dma->data_width == 2) {
			for (y = t_y; y <= b_y; y++)
 4001768:	94800044 	addi	r18,r18,1
 400176c:	9cbff32e 	bgeu	r19,r18,400173c <__alt_data_end+0xfc00173c>
 4001770:	00005306 	br	40018c0 <alt_up_video_dma_draw_box+0x2fc>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4001774:	8825883a 	mov	r18,r17
 4001778:	00000d06 	br	40017b0 <alt_up_video_dma_draw_box+0x1ec>
			{
				for (x = l_x; x <= r_x; x++)
 400177c:	b023883a 	mov	r17,r22
 4001780:	00000606 	br	400179c <alt_up_video_dma_draw_box+0x1d8>
				{
					IOWR_32DIRECT(addr, x << 2, local_symbol);
 4001784:	8c45883a 	add	r2,r17,r17
 4001788:	1085883a 	add	r2,r2,r2
 400178c:	1405883a 	add	r2,r2,r16
 4001790:	b807883a 	mov	r3,r23
 4001794:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001798:	8c400044 	addi	r17,r17,1
 400179c:	a47ff92e 	bgeu	r20,r17,4001784 <__alt_data_end+0xfc001784>
				{
					IOWR_32DIRECT(addr, x << 2, local_symbol);
				}
				addr = addr + (1 << offset_y);
 40017a0:	00800044 	movi	r2,1
 40017a4:	1544983a 	sll	r2,r2,r21
 40017a8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40017ac:	94800044 	addi	r18,r18,1
 40017b0:	9cbff22e 	bgeu	r19,r18,400177c <__alt_data_end+0xfc00177c>
 40017b4:	00004206 	br	40018c0 <alt_up_video_dma_draw_box+0x2fc>
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;

		/* This portion of the code is purposefully replicated. This is because having a test for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (video_dma->data_width == 1) {
 40017b8:	e0bff417 	ldw	r2,-48(fp)
 40017bc:	10801017 	ldw	r2,64(r2)
 40017c0:	10800058 	cmpnei	r2,r2,1
 40017c4:	1000111e 	bne	r2,zero,400180c <alt_up_video_dma_draw_box+0x248>
			addr = addr + t_y * limit_x;
 40017c8:	900b883a 	mov	r5,r18
 40017cc:	8809883a 	mov	r4,r17
 40017d0:	40037d40 	call	40037d4 <__mulsi3>
 40017d4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40017d8:	882b883a 	mov	r21,r17
 40017dc:	00000906 	br	4001804 <alt_up_video_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
 40017e0:	b023883a 	mov	r17,r22
 40017e4:	00000406 	br	40017f8 <alt_up_video_dma_draw_box+0x234>
				{
					IOWR_8DIRECT(addr, x, local_symbol);
 40017e8:	8c05883a 	add	r2,r17,r16
 40017ec:	b807883a 	mov	r3,r23
 40017f0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (video_dma->data_width == 1) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40017f4:	8c400044 	addi	r17,r17,1
 40017f8:	a47ffb2e 	bgeu	r20,r17,40017e8 <__alt_data_end+0xfc0017e8>
				{
					IOWR_8DIRECT(addr, x, local_symbol);
				}
				addr = addr + limit_x;
 40017fc:	84a1883a 	add	r16,r16,r18

		/* This portion of the code is purposefully replicated. This is because having a test for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (video_dma->data_width == 1) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4001800:	ad400044 	addi	r21,r21,1
 4001804:	9d7ff62e 	bgeu	r19,r21,40017e0 <__alt_data_end+0xfc0017e0>
 4001808:	00002d06 	br	40018c0 <alt_up_video_dma_draw_box+0x2fc>
					IOWR_8DIRECT(addr, x, local_symbol);
				}
				addr = addr + limit_x;
			}

		} else if (video_dma->data_width == 2) {
 400180c:	e0bff417 	ldw	r2,-48(fp)
 4001810:	10801017 	ldw	r2,64(r2)
 4001814:	10800098 	cmpnei	r2,r2,2
 4001818:	1000141e 	bne	r2,zero,400186c <alt_up_video_dma_draw_box+0x2a8>
			limit_x = limit_x << 1;
 400181c:	9485883a 	add	r2,r18,r18
 4001820:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4001824:	900b883a 	mov	r5,r18
 4001828:	8809883a 	mov	r4,r17
 400182c:	40037d40 	call	40037d4 <__mulsi3>
 4001830:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4001834:	882b883a 	mov	r21,r17
 4001838:	00000a06 	br	4001864 <alt_up_video_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 400183c:	b023883a 	mov	r17,r22
 4001840:	00000506 	br	4001858 <alt_up_video_dma_draw_box+0x294>
				{
					IOWR_16DIRECT(addr, x << 1, local_symbol);
 4001844:	8c45883a 	add	r2,r17,r17
 4001848:	1405883a 	add	r2,r2,r16
 400184c:	b807883a 	mov	r3,r23
 4001850:	10c0002d 	sthio	r3,0(r2)
		} else if (video_dma->data_width == 2) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001854:	8c400044 	addi	r17,r17,1
 4001858:	a47ffa2e 	bgeu	r20,r17,4001844 <__alt_data_end+0xfc001844>
				{
					IOWR_16DIRECT(addr, x << 1, local_symbol);
				}
				addr = addr + limit_x;
 400185c:	84a1883a 	add	r16,r16,r18
			}

		} else if (video_dma->data_width == 2) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4001860:	ad400044 	addi	r21,r21,1
 4001864:	9d7ff52e 	bgeu	r19,r21,400183c <__alt_data_end+0xfc00183c>
 4001868:	00001506 	br	40018c0 <alt_up_video_dma_draw_box+0x2fc>
				}
				addr = addr + limit_x;
			}

		} else {
			limit_x = limit_x << 2;
 400186c:	9485883a 	add	r2,r18,r18
 4001870:	1085883a 	add	r2,r2,r2
 4001874:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4001878:	900b883a 	mov	r5,r18
 400187c:	8809883a 	mov	r4,r17
 4001880:	40037d40 	call	40037d4 <__mulsi3>
 4001884:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4001888:	882b883a 	mov	r21,r17
 400188c:	00000b06 	br	40018bc <alt_up_video_dma_draw_box+0x2f8>
			{
				for (x = l_x; x <= r_x; x++)
 4001890:	b023883a 	mov	r17,r22
 4001894:	00000606 	br	40018b0 <alt_up_video_dma_draw_box+0x2ec>
				{
					IOWR_32DIRECT(addr, x << 2, local_symbol);
 4001898:	8c45883a 	add	r2,r17,r17
 400189c:	1085883a 	add	r2,r2,r2
 40018a0:	1405883a 	add	r2,r2,r16
 40018a4:	b807883a 	mov	r3,r23
 40018a8:	10c00035 	stwio	r3,0(r2)
		} else {
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40018ac:	8c400044 	addi	r17,r17,1
 40018b0:	a47ff92e 	bgeu	r20,r17,4001898 <__alt_data_end+0xfc001898>
				{
					IOWR_32DIRECT(addr, x << 2, local_symbol);
				}
				addr = addr + limit_x;
 40018b4:	84a1883a 	add	r16,r16,r18
			}

		} else {
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40018b8:	ad400044 	addi	r21,r21,1
 40018bc:	9d7ff42e 	bgeu	r19,r21,4001890 <__alt_data_end+0xfc001890>
				}
				addr = addr + limit_x;
			}
		}
	}
	return 0;
 40018c0:	0005883a 	mov	r2,zero
}
 40018c4:	e6fff804 	addi	sp,fp,-32
 40018c8:	dfc00917 	ldw	ra,36(sp)
 40018cc:	df000817 	ldw	fp,32(sp)
 40018d0:	ddc00717 	ldw	r23,28(sp)
 40018d4:	dd800617 	ldw	r22,24(sp)
 40018d8:	dd400517 	ldw	r21,20(sp)
 40018dc:	dd000417 	ldw	r20,16(sp)
 40018e0:	dcc00317 	ldw	r19,12(sp)
 40018e4:	dc800217 	ldw	r18,8(sp)
 40018e8:	dc400117 	ldw	r17,4(sp)
 40018ec:	dc000017 	ldw	r16,0(sp)
 40018f0:	dec00a04 	addi	sp,sp,40
 40018f4:	f800283a 	ret

040018f8 <alt_up_video_dma_draw_line>:

int alt_up_video_dma_draw_line(alt_up_video_dma_dev *video_dma, unsigned int symbol, unsigned int x0, unsigned int y0, unsigned int x1, unsigned int y1, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). */
{
 40018f8:	deffec04 	addi	sp,sp,-80
 40018fc:	dfc01315 	stw	ra,76(sp)
 4001900:	df001215 	stw	fp,72(sp)
 4001904:	ddc01115 	stw	r23,68(sp)
 4001908:	dd801015 	stw	r22,64(sp)
 400190c:	dd400f15 	stw	r21,60(sp)
 4001910:	dd000e15 	stw	r20,56(sp)
 4001914:	dcc00d15 	stw	r19,52(sp)
 4001918:	dc800c15 	stw	r18,48(sp)
 400191c:	dc400b15 	stw	r17,44(sp)
 4001920:	dc000a15 	stw	r16,40(sp)
 4001924:	df001204 	addi	fp,sp,72
 4001928:	e13fee15 	stw	r4,-72(fp)
 400192c:	e17fef15 	stw	r5,-68(fp)
 4001930:	e1bff015 	stw	r6,-64(fp)
 4001934:	e1fff115 	stw	r7,-60(fp)
	register int x_0 = x0;
 4001938:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 400193c:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 4001940:	e4800217 	ldw	r18,8(fp)
	register int y_1 = y1;
 4001944:	e5000317 	ldw	r20,12(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4001948:	a4c5c83a 	sub	r2,r20,r19
 400194c:	1000010e 	bge	r2,zero,4001954 <alt_up_video_dma_draw_line+0x5c>
 4001950:	0085c83a 	sub	r2,zero,r2
 4001954:	1007883a 	mov	r3,r2
 4001958:	9445c83a 	sub	r2,r18,r17
 400195c:	1000010e 	bge	r2,zero,4001964 <alt_up_video_dma_draw_line+0x6c>
 4001960:	0085c83a 	sub	r2,zero,r2
 4001964:	10c4803a 	cmplt	r2,r2,r3
 4001968:	e0bff205 	stb	r2,-56(fp)
	register int deltax, deltay, error, ystep, x, y;
	register unsigned int data_width = video_dma->data_width;
 400196c:	e0bfee17 	ldw	r2,-72(fp)
 4001970:	10801017 	ldw	r2,64(r2)
 4001974:	e0bff315 	stw	r2,-52(fp)
	register unsigned int line_symbol = symbol;
 4001978:	e0bfef17 	ldw	r2,-68(fp)
 400197c:	e0bff415 	stw	r2,-48(fp)
	register unsigned int buffer_start;
	register unsigned int offset;
	register unsigned int x_coord_offset = video_dma->x_coord_offset;
 4001980:	e0bfee17 	ldw	r2,-72(fp)
 4001984:	10801317 	ldw	r2,76(r2)
 4001988:	e0bff515 	stw	r2,-44(fp)
	register int line_size = (video_dma->addressing_mode == ALT_UP_VIDEO_DMA_XY_ADDRESS_MODE) ? (1 << (video_dma->y_coord_offset-video_dma->x_coord_offset)) : video_dma->x_resolution;
 400198c:	e0bfee17 	ldw	r2,-72(fp)
 4001990:	10800d17 	ldw	r2,52(r2)
 4001994:	1000081e 	bne	r2,zero,40019b8 <alt_up_video_dma_draw_line+0xc0>
 4001998:	e0bfee17 	ldw	r2,-72(fp)
 400199c:	10c01517 	ldw	r3,84(r2)
 40019a0:	e0bfee17 	ldw	r2,-72(fp)
 40019a4:	10801317 	ldw	r2,76(r2)
 40019a8:	1885c83a 	sub	r2,r3,r2
 40019ac:	00c00044 	movi	r3,1
 40019b0:	1884983a 	sll	r2,r3,r2
 40019b4:	00000206 	br	40019c0 <alt_up_video_dma_draw_line+0xc8>
 40019b8:	e0bfee17 	ldw	r2,-72(fp)
 40019bc:	10801117 	ldw	r2,68(r2)
 40019c0:	e0bff615 	stw	r2,-40(fp)

	// Bounds check
	// Only draw lines that are fully on the screen
	if ((x0 < 0) || (x0 >= video_dma->x_resolution))
 40019c4:	e0bfee17 	ldw	r2,-72(fp)
 40019c8:	10801117 	ldw	r2,68(r2)
 40019cc:	e0fff017 	ldw	r3,-64(fp)
 40019d0:	18800236 	bltu	r3,r2,40019dc <alt_up_video_dma_draw_line+0xe4>
		return -1;
 40019d4:	00bfffc4 	movi	r2,-1
 40019d8:	00006306 	br	4001b68 <alt_up_video_dma_draw_line+0x270>
	if ((x1 < 0) || (x1 >= video_dma->x_resolution))
 40019dc:	e0bfee17 	ldw	r2,-72(fp)
 40019e0:	10801117 	ldw	r2,68(r2)
 40019e4:	e0c00217 	ldw	r3,8(fp)
 40019e8:	18800236 	bltu	r3,r2,40019f4 <alt_up_video_dma_draw_line+0xfc>
		return -1;
 40019ec:	00bfffc4 	movi	r2,-1
 40019f0:	00005d06 	br	4001b68 <alt_up_video_dma_draw_line+0x270>
	if ((y0 < 0) || (y0 >= video_dma->y_resolution))
 40019f4:	e0bfee17 	ldw	r2,-72(fp)
 40019f8:	10801217 	ldw	r2,72(r2)
 40019fc:	e0fff117 	ldw	r3,-60(fp)
 4001a00:	18800236 	bltu	r3,r2,4001a0c <alt_up_video_dma_draw_line+0x114>
		return -1;
 4001a04:	00bfffc4 	movi	r2,-1
 4001a08:	00005706 	br	4001b68 <alt_up_video_dma_draw_line+0x270>
	if ((y1 < 0) || (y1 >= video_dma->y_resolution))
 4001a0c:	e0bfee17 	ldw	r2,-72(fp)
 4001a10:	10801217 	ldw	r2,72(r2)
 4001a14:	e0c00317 	ldw	r3,12(fp)
 4001a18:	18800236 	bltu	r3,r2,4001a24 <alt_up_video_dma_draw_line+0x12c>
		return -1;
 4001a1c:	00bfffc4 	movi	r2,-1
 4001a20:	00005106 	br	4001b68 <alt_up_video_dma_draw_line+0x270>

	if (backbuffer == 1)
 4001a24:	e0800417 	ldw	r2,16(fp)
 4001a28:	10800058 	cmpnei	r2,r2,1
 4001a2c:	1000031e 	bne	r2,zero,4001a3c <alt_up_video_dma_draw_line+0x144>
		buffer_start = video_dma->back_buffer_start_address;
 4001a30:	e0bfee17 	ldw	r2,-72(fp)
 4001a34:	15c00c17 	ldw	r23,48(r2)
 4001a38:	00000206 	br	4001a44 <alt_up_video_dma_draw_line+0x14c>
	else
		buffer_start = video_dma->buffer_start_address;
 4001a3c:	e0bfee17 	ldw	r2,-72(fp)
 4001a40:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 4001a44:	e0bff207 	ldb	r2,-56(fp)
 4001a48:	0080060e 	bge	zero,r2,4001a64 <alt_up_video_dma_draw_line+0x16c>
		// Swap x_0 and y_0
		error = x_0;
 4001a4c:	8821883a 	mov	r16,r17
		x_0 = y_0;
 4001a50:	9823883a 	mov	r17,r19
		y_0 = error;
 4001a54:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 4001a58:	9021883a 	mov	r16,r18
		x_1 = y_1;
 4001a5c:	a025883a 	mov	r18,r20
		y_1 = error;
 4001a60:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 4001a64:	9440060e 	bge	r18,r17,4001a80 <alt_up_video_dma_draw_line+0x188>
		// Swap x_0 and x_1
		error = x_0;
 4001a68:	8821883a 	mov	r16,r17
		x_0 = x_1;
 4001a6c:	9023883a 	mov	r17,r18
		x_1 = error;
 4001a70:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 4001a74:	9821883a 	mov	r16,r19
		y_0 = y_1;
 4001a78:	a027883a 	mov	r19,r20
		y_1 = error;
 4001a7c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4001a80:	946dc83a 	sub	r22,r18,r17
	deltay = ABS(y_1 - y_0);
 4001a84:	a4c5c83a 	sub	r2,r20,r19
 4001a88:	1000010e 	bge	r2,zero,4001a90 <alt_up_video_dma_draw_line+0x198>
 4001a8c:	0085c83a 	sub	r2,zero,r2
 4001a90:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 4001a94:	b004d7fa 	srli	r2,r22,31
 4001a98:	1585883a 	add	r2,r2,r22
 4001a9c:	1005d07a 	srai	r2,r2,1
 4001aa0:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4001aa4:	982b883a 	mov	r21,r19
	if (y_0 < y_1)
 4001aa8:	9d00020e 	bge	r19,r20,4001ab4 <alt_up_video_dma_draw_line+0x1bc>
		ystep = 1;
 4001aac:	04c00044 	movi	r19,1
 4001ab0:	00000106 	br	4001ab8 <alt_up_video_dma_draw_line+0x1c0>
	else
		ystep = -1;
 4001ab4:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4001ab8:	e0bff207 	ldb	r2,-56(fp)
 4001abc:	10800058 	cmpnei	r2,r2,1
 4001ac0:	1000271e 	bne	r2,zero,4001b60 <alt_up_video_dma_draw_line+0x268>
	{
		for (x=x_0; x <= x_1; x++) {
 4001ac4:	00001206 	br	4001b10 <alt_up_video_dma_draw_line+0x218>
			offset = ((line_size * x + y) << x_coord_offset);
 4001ac8:	880b883a 	mov	r5,r17
 4001acc:	e13ff617 	ldw	r4,-40(fp)
 4001ad0:	40037d40 	call	40037d4 <__mulsi3>
 4001ad4:	1545883a 	add	r2,r2,r21
 4001ad8:	e0fff517 	ldw	r3,-44(fp)
 4001adc:	10c4983a 	sll	r2,r2,r3
 4001ae0:	1029883a 	mov	r20,r2
			alt_up_video_dma_draw_helper(buffer_start, offset, line_symbol, data_width);
 4001ae4:	e1fff317 	ldw	r7,-52(fp)
 4001ae8:	e1bff417 	ldw	r6,-48(fp)
 4001aec:	a00b883a 	mov	r5,r20
 4001af0:	b809883a 	mov	r4,r23
 4001af4:	40022180 	call	4002218 <alt_up_video_dma_draw_helper>
			error = error + deltay;
 4001af8:	e0bff717 	ldw	r2,-36(fp)
 4001afc:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4001b00:	0400020e 	bge	zero,r16,4001b0c <alt_up_video_dma_draw_line+0x214>
				y = y + ystep;
 4001b04:	aceb883a 	add	r21,r21,r19
				error = error - deltax;
 4001b08:	85a1c83a 	sub	r16,r16,r22

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 4001b0c:	8c400044 	addi	r17,r17,1
 4001b10:	947fed0e 	bge	r18,r17,4001ac8 <__alt_data_end+0xfc001ac8>
 4001b14:	00001306 	br	4001b64 <alt_up_video_dma_draw_line+0x26c>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			offset = ((line_size * y + x) << x_coord_offset);
 4001b18:	a80b883a 	mov	r5,r21
 4001b1c:	e13ff617 	ldw	r4,-40(fp)
 4001b20:	40037d40 	call	40037d4 <__mulsi3>
 4001b24:	1445883a 	add	r2,r2,r17
 4001b28:	e0fff517 	ldw	r3,-44(fp)
 4001b2c:	10c4983a 	sll	r2,r2,r3
 4001b30:	1029883a 	mov	r20,r2
			alt_up_video_dma_draw_helper(buffer_start, offset, line_symbol, data_width);
 4001b34:	e1fff317 	ldw	r7,-52(fp)
 4001b38:	e1bff417 	ldw	r6,-48(fp)
 4001b3c:	a00b883a 	mov	r5,r20
 4001b40:	b809883a 	mov	r4,r23
 4001b44:	40022180 	call	4002218 <alt_up_video_dma_draw_helper>
			error = error + deltay;
 4001b48:	e0bff717 	ldw	r2,-36(fp)
 4001b4c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4001b50:	0400020e 	bge	zero,r16,4001b5c <alt_up_video_dma_draw_line+0x264>
				y = y + ystep;
 4001b54:	aceb883a 	add	r21,r21,r19
				error = error - deltax;
 4001b58:	85a1c83a 	sub	r16,r16,r22
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4001b5c:	8c400044 	addi	r17,r17,1
 4001b60:	947fed0e 	bge	r18,r17,4001b18 <__alt_data_end+0xfc001b18>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
	return 0;
 4001b64:	0005883a 	mov	r2,zero
}
 4001b68:	e6fff804 	addi	sp,fp,-32
 4001b6c:	dfc00917 	ldw	ra,36(sp)
 4001b70:	df000817 	ldw	fp,32(sp)
 4001b74:	ddc00717 	ldw	r23,28(sp)
 4001b78:	dd800617 	ldw	r22,24(sp)
 4001b7c:	dd400517 	ldw	r21,20(sp)
 4001b80:	dd000417 	ldw	r20,16(sp)
 4001b84:	dcc00317 	ldw	r19,12(sp)
 4001b88:	dc800217 	ldw	r18,8(sp)
 4001b8c:	dc400117 	ldw	r17,4(sp)
 4001b90:	dc000017 	ldw	r16,0(sp)
 4001b94:	dec00a04 	addi	sp,sp,40
 4001b98:	f800283a 	ret

04001b9c <alt_up_video_dma_draw_string>:

int alt_up_video_dma_draw_string(alt_up_video_dma_dev *video_dma, const char *ptr, unsigned int x, unsigned int y, int backbuffer) {
 4001b9c:	defff904 	addi	sp,sp,-28
 4001ba0:	df000615 	stw	fp,24(sp)
 4001ba4:	dc000515 	stw	r16,20(sp)
 4001ba8:	df000604 	addi	fp,sp,24
 4001bac:	e13ffb15 	stw	r4,-20(fp)
 4001bb0:	e17ffc15 	stw	r5,-16(fp)
 4001bb4:	e1bffd15 	stw	r6,-12(fp)
 4001bb8:	e1fffe15 	stw	r7,-8(fp)
	register unsigned int addr;

	/* Set up the start address of the chosen frame buffer. */
	if (backbuffer == 1)
 4001bbc:	e0800117 	ldw	r2,4(fp)
 4001bc0:	10800058 	cmpnei	r2,r2,1
 4001bc4:	1000031e 	bne	r2,zero,4001bd4 <alt_up_video_dma_draw_string+0x38>
		addr = video_dma->back_buffer_start_address;
 4001bc8:	e0bffb17 	ldw	r2,-20(fp)
 4001bcc:	14000c17 	ldw	r16,48(r2)
 4001bd0:	00000206 	br	4001bdc <alt_up_video_dma_draw_string+0x40>
	else
		addr = video_dma->buffer_start_address;
 4001bd4:	e0bffb17 	ldw	r2,-20(fp)
 4001bd8:	14000b17 	ldw	r16,44(r2)

	// boundary check
	if (x >= video_dma->x_resolution || y >= video_dma->y_resolution )
 4001bdc:	e0bffb17 	ldw	r2,-20(fp)
 4001be0:	10801117 	ldw	r2,68(r2)
 4001be4:	e0fffd17 	ldw	r3,-12(fp)
 4001be8:	1880042e 	bgeu	r3,r2,4001bfc <alt_up_video_dma_draw_string+0x60>
 4001bec:	e0bffb17 	ldw	r2,-20(fp)
 4001bf0:	10801217 	ldw	r2,72(r2)
 4001bf4:	e0fffe17 	ldw	r3,-8(fp)
 4001bf8:	18800236 	bltu	r3,r2,4001c04 <alt_up_video_dma_draw_string+0x68>
		return -1;
 4001bfc:	00bfffc4 	movi	r2,-1
 4001c00:	00007206 	br	4001dcc <alt_up_video_dma_draw_string+0x230>
	
	unsigned int offset = 0;
 4001c04:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << video_dma->y_coord_offset) + (x << video_dma->x_coord_offset);
 4001c08:	e0bffb17 	ldw	r2,-20(fp)
 4001c0c:	10801517 	ldw	r2,84(r2)
 4001c10:	e0fffe17 	ldw	r3,-8(fp)
 4001c14:	1886983a 	sll	r3,r3,r2
 4001c18:	e0bffb17 	ldw	r2,-20(fp)
 4001c1c:	10801317 	ldw	r2,76(r2)
 4001c20:	e13ffd17 	ldw	r4,-12(fp)
 4001c24:	2084983a 	sll	r2,r4,r2
 4001c28:	1885883a 	add	r2,r3,r2
 4001c2c:	e0bffa15 	stw	r2,-24(fp)

	if (video_dma->data_width == 1) {
 4001c30:	e0bffb17 	ldw	r2,-20(fp)
 4001c34:	10801017 	ldw	r2,64(r2)
 4001c38:	10800058 	cmpnei	r2,r2,1
 4001c3c:	1000201e 	bne	r2,zero,4001cc0 <alt_up_video_dma_draw_string+0x124>
		while ( *ptr )
 4001c40:	00001806 	br	4001ca4 <alt_up_video_dma_draw_string+0x108>
		{
			if (x >= video_dma->x_resolution)
 4001c44:	e0bffb17 	ldw	r2,-20(fp)
 4001c48:	10801117 	ldw	r2,68(r2)
 4001c4c:	e0fffd17 	ldw	r3,-12(fp)
 4001c50:	18800236 	bltu	r3,r2,4001c5c <alt_up_video_dma_draw_string+0xc0>
				return -1;
 4001c54:	00bfffc4 	movi	r2,-1
 4001c58:	00005c06 	br	4001dcc <alt_up_video_dma_draw_string+0x230>
			IOWR_8DIRECT(addr, offset, *ptr);
 4001c5c:	e0bffa17 	ldw	r2,-24(fp)
 4001c60:	8085883a 	add	r2,r16,r2
 4001c64:	1007883a 	mov	r3,r2
 4001c68:	e0bffc17 	ldw	r2,-16(fp)
 4001c6c:	10800003 	ldbu	r2,0(r2)
 4001c70:	10803fcc 	andi	r2,r2,255
 4001c74:	1080201c 	xori	r2,r2,128
 4001c78:	10bfe004 	addi	r2,r2,-128
 4001c7c:	18800025 	stbio	r2,0(r3)
			++ptr;
 4001c80:	e0bffc17 	ldw	r2,-16(fp)
 4001c84:	10800044 	addi	r2,r2,1
 4001c88:	e0bffc15 	stw	r2,-16(fp)
			++x;
 4001c8c:	e0bffd17 	ldw	r2,-12(fp)
 4001c90:	10800044 	addi	r2,r2,1
 4001c94:	e0bffd15 	stw	r2,-12(fp)
			++offset;
 4001c98:	e0bffa17 	ldw	r2,-24(fp)
 4001c9c:	10800044 	addi	r2,r2,1
 4001ca0:	e0bffa15 	stw	r2,-24(fp)
	
	unsigned int offset = 0;
	offset = (y << video_dma->y_coord_offset) + (x << video_dma->x_coord_offset);

	if (video_dma->data_width == 1) {
		while ( *ptr )
 4001ca4:	e0bffc17 	ldw	r2,-16(fp)
 4001ca8:	10800003 	ldbu	r2,0(r2)
 4001cac:	10803fcc 	andi	r2,r2,255
 4001cb0:	1080201c 	xori	r2,r2,128
 4001cb4:	10bfe004 	addi	r2,r2,-128
 4001cb8:	103fe21e 	bne	r2,zero,4001c44 <__alt_data_end+0xfc001c44>
 4001cbc:	00004206 	br	4001dc8 <alt_up_video_dma_draw_string+0x22c>
			IOWR_8DIRECT(addr, offset, *ptr);
			++ptr;
			++x;
			++offset;
		}
	} else if (video_dma->data_width == 2) {
 4001cc0:	e0bffb17 	ldw	r2,-20(fp)
 4001cc4:	10801017 	ldw	r2,64(r2)
 4001cc8:	10800098 	cmpnei	r2,r2,2
 4001ccc:	1000381e 	bne	r2,zero,4001db0 <alt_up_video_dma_draw_string+0x214>
		while ( *ptr )
 4001cd0:	00001806 	br	4001d34 <alt_up_video_dma_draw_string+0x198>
		{
			if (x >= video_dma->x_resolution)
 4001cd4:	e0bffb17 	ldw	r2,-20(fp)
 4001cd8:	10801117 	ldw	r2,68(r2)
 4001cdc:	e0fffd17 	ldw	r3,-12(fp)
 4001ce0:	18800236 	bltu	r3,r2,4001cec <alt_up_video_dma_draw_string+0x150>
				return -1;
 4001ce4:	00bfffc4 	movi	r2,-1
 4001ce8:	00003806 	br	4001dcc <alt_up_video_dma_draw_string+0x230>
			IOWR_16DIRECT(addr, offset, *ptr);
 4001cec:	e0bffa17 	ldw	r2,-24(fp)
 4001cf0:	8085883a 	add	r2,r16,r2
 4001cf4:	1007883a 	mov	r3,r2
 4001cf8:	e0bffc17 	ldw	r2,-16(fp)
 4001cfc:	10800003 	ldbu	r2,0(r2)
 4001d00:	10803fcc 	andi	r2,r2,255
 4001d04:	1080201c 	xori	r2,r2,128
 4001d08:	10bfe004 	addi	r2,r2,-128
 4001d0c:	1880002d 	sthio	r2,0(r3)
			++ptr;
 4001d10:	e0bffc17 	ldw	r2,-16(fp)
 4001d14:	10800044 	addi	r2,r2,1
 4001d18:	e0bffc15 	stw	r2,-16(fp)
			++x;
 4001d1c:	e0bffd17 	ldw	r2,-12(fp)
 4001d20:	10800044 	addi	r2,r2,1
 4001d24:	e0bffd15 	stw	r2,-12(fp)
			offset += 2;
 4001d28:	e0bffa17 	ldw	r2,-24(fp)
 4001d2c:	10800084 	addi	r2,r2,2
 4001d30:	e0bffa15 	stw	r2,-24(fp)
			++ptr;
			++x;
			++offset;
		}
	} else if (video_dma->data_width == 2) {
		while ( *ptr )
 4001d34:	e0bffc17 	ldw	r2,-16(fp)
 4001d38:	10800003 	ldbu	r2,0(r2)
 4001d3c:	10803fcc 	andi	r2,r2,255
 4001d40:	1080201c 	xori	r2,r2,128
 4001d44:	10bfe004 	addi	r2,r2,-128
 4001d48:	103fe21e 	bne	r2,zero,4001cd4 <__alt_data_end+0xfc001cd4>
 4001d4c:	00001e06 	br	4001dc8 <alt_up_video_dma_draw_string+0x22c>
			offset += 2;
		}
	} else {
		while ( *ptr )
		{
			if (x >= video_dma->x_resolution)
 4001d50:	e0bffb17 	ldw	r2,-20(fp)
 4001d54:	10801117 	ldw	r2,68(r2)
 4001d58:	e0fffd17 	ldw	r3,-12(fp)
 4001d5c:	18800236 	bltu	r3,r2,4001d68 <alt_up_video_dma_draw_string+0x1cc>
				return -1;
 4001d60:	00bfffc4 	movi	r2,-1
 4001d64:	00001906 	br	4001dcc <alt_up_video_dma_draw_string+0x230>
			IOWR_8DIRECT(addr, offset, *ptr);
 4001d68:	e0bffa17 	ldw	r2,-24(fp)
 4001d6c:	8085883a 	add	r2,r16,r2
 4001d70:	1007883a 	mov	r3,r2
 4001d74:	e0bffc17 	ldw	r2,-16(fp)
 4001d78:	10800003 	ldbu	r2,0(r2)
 4001d7c:	10803fcc 	andi	r2,r2,255
 4001d80:	1080201c 	xori	r2,r2,128
 4001d84:	10bfe004 	addi	r2,r2,-128
 4001d88:	18800025 	stbio	r2,0(r3)
			++ptr;
 4001d8c:	e0bffc17 	ldw	r2,-16(fp)
 4001d90:	10800044 	addi	r2,r2,1
 4001d94:	e0bffc15 	stw	r2,-16(fp)
			++x;
 4001d98:	e0bffd17 	ldw	r2,-12(fp)
 4001d9c:	10800044 	addi	r2,r2,1
 4001da0:	e0bffd15 	stw	r2,-12(fp)
			offset += 4;
 4001da4:	e0bffa17 	ldw	r2,-24(fp)
 4001da8:	10800104 	addi	r2,r2,4
 4001dac:	e0bffa15 	stw	r2,-24(fp)
			++ptr;
			++x;
			offset += 2;
		}
	} else {
		while ( *ptr )
 4001db0:	e0bffc17 	ldw	r2,-16(fp)
 4001db4:	10800003 	ldbu	r2,0(r2)
 4001db8:	10803fcc 	andi	r2,r2,255
 4001dbc:	1080201c 	xori	r2,r2,128
 4001dc0:	10bfe004 	addi	r2,r2,-128
 4001dc4:	103fe21e 	bne	r2,zero,4001d50 <__alt_data_end+0xfc001d50>
			++ptr;
			++x;
			offset += 4;
		}
	}
	return 0;
 4001dc8:	0005883a 	mov	r2,zero
}
 4001dcc:	e6ffff04 	addi	sp,fp,-4
 4001dd0:	df000117 	ldw	fp,4(sp)
 4001dd4:	dc000017 	ldw	r16,0(sp)
 4001dd8:	dec00204 	addi	sp,sp,8
 4001ddc:	f800283a 	ret

04001de0 <alt_up_video_dma_screen_clear>:

void alt_up_video_dma_screen_clear(alt_up_video_dma_dev *video_dma, int backbuffer) {
 4001de0:	defffc04 	addi	sp,sp,-16
 4001de4:	dfc00315 	stw	ra,12(sp)
 4001de8:	df000215 	stw	fp,8(sp)
 4001dec:	df000204 	addi	fp,sp,8
 4001df0:	e13ffe15 	stw	r4,-8(fp)
 4001df4:	e17fff15 	stw	r5,-4(fp)
	alt_up_video_dma_screen_fill(video_dma, 0, backbuffer);
 4001df8:	e1bfff17 	ldw	r6,-4(fp)
 4001dfc:	000b883a 	mov	r5,zero
 4001e00:	e13ffe17 	ldw	r4,-8(fp)
 4001e04:	4001e200 	call	4001e20 <alt_up_video_dma_screen_fill>
}
 4001e08:	0001883a 	nop
 4001e0c:	e037883a 	mov	sp,fp
 4001e10:	dfc00117 	ldw	ra,4(sp)
 4001e14:	df000017 	ldw	fp,0(sp)
 4001e18:	dec00204 	addi	sp,sp,8
 4001e1c:	f800283a 	ret

04001e20 <alt_up_video_dma_screen_fill>:

void alt_up_video_dma_screen_fill(alt_up_video_dma_dev *video_dma, unsigned int symbol, int backbuffer) {
 4001e20:	defff704 	addi	sp,sp,-36
 4001e24:	dfc00815 	stw	ra,32(sp)
 4001e28:	df000715 	stw	fp,28(sp)
 4001e2c:	df000704 	addi	fp,sp,28
 4001e30:	e13ffd15 	stw	r4,-12(fp)
 4001e34:	e17ffe15 	stw	r5,-8(fp)
 4001e38:	e1bfff15 	stw	r6,-4(fp)
	alt_up_video_dma_draw_box(video_dma, symbol, 0, 0, video_dma->x_resolution-1, video_dma->y_resolution-1, backbuffer, 1);
 4001e3c:	e0bffd17 	ldw	r2,-12(fp)
 4001e40:	10801117 	ldw	r2,68(r2)
 4001e44:	10bfffc4 	addi	r2,r2,-1
 4001e48:	e0fffd17 	ldw	r3,-12(fp)
 4001e4c:	18c01217 	ldw	r3,72(r3)
 4001e50:	18ffffc4 	addi	r3,r3,-1
 4001e54:	01000044 	movi	r4,1
 4001e58:	d9000315 	stw	r4,12(sp)
 4001e5c:	e13fff17 	ldw	r4,-4(fp)
 4001e60:	d9000215 	stw	r4,8(sp)
 4001e64:	d8c00115 	stw	r3,4(sp)
 4001e68:	d8800015 	stw	r2,0(sp)
 4001e6c:	000f883a 	mov	r7,zero
 4001e70:	000d883a 	mov	r6,zero
 4001e74:	e17ffe17 	ldw	r5,-8(fp)
 4001e78:	e13ffd17 	ldw	r4,-12(fp)
 4001e7c:	40015c40 	call	40015c4 <alt_up_video_dma_draw_box>
}
 4001e80:	0001883a 	nop
 4001e84:	e037883a 	mov	sp,fp
 4001e88:	dfc00117 	ldw	ra,4(sp)
 4001e8c:	df000017 	ldw	fp,0(sp)
 4001e90:	dec00204 	addi	sp,sp,8
 4001e94:	f800283a 	ret

04001e98 <alt_up_video_dma_draw_hline>:
		register unsigned int x0, register unsigned int x1, register unsigned int y, 
		int backbuffer)
/* This method draws a vertical line between points (x,y0) and (x,y1). This 
 * method is faster than using the line method because we know the direction 
 * of the line. */
{
 4001e98:	defff904 	addi	sp,sp,-28
 4001e9c:	dfc00615 	stw	ra,24(sp)
 4001ea0:	df000515 	stw	fp,20(sp)
 4001ea4:	dcc00415 	stw	r19,16(sp)
 4001ea8:	dc800315 	stw	r18,12(sp)
 4001eac:	dc400215 	stw	r17,8(sp)
 4001eb0:	dc000115 	stw	r16,4(sp)
 4001eb4:	df000504 	addi	fp,sp,20
 4001eb8:	e13ffb15 	stw	r4,-20(fp)
 4001ebc:	2827883a 	mov	r19,r5
 4001ec0:	3021883a 	mov	r16,r6
 4001ec4:	3825883a 	mov	r18,r7
 4001ec8:	e0c00217 	ldw	r3,8(fp)
	register unsigned int addr = 0;
 4001ecc:	0023883a 	mov	r17,zero
	register unsigned int x;

	/* Set up the start address of the chosen frame buffer. */
	if (backbuffer == 1)
 4001ed0:	e0800317 	ldw	r2,12(fp)
 4001ed4:	10800058 	cmpnei	r2,r2,1
 4001ed8:	1000031e 	bne	r2,zero,4001ee8 <alt_up_video_dma_draw_hline+0x50>
		addr = video_dma->back_buffer_start_address;
 4001edc:	e0bffb17 	ldw	r2,-20(fp)
 4001ee0:	14400c17 	ldw	r17,48(r2)
 4001ee4:	00000206 	br	4001ef0 <alt_up_video_dma_draw_hline+0x58>
	else
		addr = video_dma->buffer_start_address;
 4001ee8:	e0bffb17 	ldw	r2,-20(fp)
 4001eec:	14400b17 	ldw	r17,44(r2)

	/* Calculate the y offset based on the addressing modes. */
	if (video_dma->addressing_mode == ALT_UP_VIDEO_DMA_XY_ADDRESS_MODE) {
 4001ef0:	e0bffb17 	ldw	r2,-20(fp)
 4001ef4:	10800d17 	ldw	r2,52(r2)
 4001ef8:	1000051e 	bne	r2,zero,4001f10 <alt_up_video_dma_draw_hline+0x78>
		addr += (y << video_dma->y_coord_offset);
 4001efc:	e0bffb17 	ldw	r2,-20(fp)
 4001f00:	10801517 	ldw	r2,84(r2)
 4001f04:	1884983a 	sll	r2,r3,r2
 4001f08:	88a3883a 	add	r17,r17,r2
 4001f0c:	00000a06 	br	4001f38 <alt_up_video_dma_draw_hline+0xa0>
	} else {
		addr += ((y * video_dma->x_resolution) << video_dma->x_coord_offset);
 4001f10:	e0bffb17 	ldw	r2,-20(fp)
 4001f14:	10801117 	ldw	r2,68(r2)
 4001f18:	180b883a 	mov	r5,r3
 4001f1c:	1009883a 	mov	r4,r2
 4001f20:	40037d40 	call	40037d4 <__mulsi3>
 4001f24:	1007883a 	mov	r3,r2
 4001f28:	e0bffb17 	ldw	r2,-20(fp)
 4001f2c:	10801317 	ldw	r2,76(r2)
 4001f30:	1884983a 	sll	r2,r3,r2
 4001f34:	88a3883a 	add	r17,r17,r2
	}

	/* This portion of the code is purposefully replicated. This is because having a text for
	 * the mode would unnecessarily slow down the drawing of a horizontal line. */
	if (video_dma->data_width == 1) {
 4001f38:	e0bffb17 	ldw	r2,-20(fp)
 4001f3c:	10801017 	ldw	r2,64(r2)
 4001f40:	10800058 	cmpnei	r2,r2,1
 4001f44:	1000071e 	bne	r2,zero,4001f64 <alt_up_video_dma_draw_hline+0xcc>
		for (x = x0; x <= x1; x++)
 4001f48:	00000406 	br	4001f5c <alt_up_video_dma_draw_hline+0xc4>
		{
			IOWR_8DIRECT(addr, x, symbol);
 4001f4c:	8445883a 	add	r2,r16,r17
 4001f50:	9807883a 	mov	r3,r19
 4001f54:	10c00025 	stbio	r3,0(r2)
	}

	/* This portion of the code is purposefully replicated. This is because having a text for
	 * the mode would unnecessarily slow down the drawing of a horizontal line. */
	if (video_dma->data_width == 1) {
		for (x = x0; x <= x1; x++)
 4001f58:	84000044 	addi	r16,r16,1
 4001f5c:	943ffb2e 	bgeu	r18,r16,4001f4c <__alt_data_end+0xfc001f4c>
		for (x = x0; x <= x1; x++)
		{
			IOWR_32DIRECT(addr, x << 2, symbol);
		}
	}
}
 4001f60:	00001306 	br	4001fb0 <alt_up_video_dma_draw_hline+0x118>
	if (video_dma->data_width == 1) {
		for (x = x0; x <= x1; x++)
		{
			IOWR_8DIRECT(addr, x, symbol);
		}
	} else if (video_dma->data_width == 2) {
 4001f64:	e0bffb17 	ldw	r2,-20(fp)
 4001f68:	10801017 	ldw	r2,64(r2)
 4001f6c:	10800098 	cmpnei	r2,r2,2
 4001f70:	10000e1e 	bne	r2,zero,4001fac <alt_up_video_dma_draw_hline+0x114>
		for (x = x0; x <= x1; x++)
 4001f74:	00000506 	br	4001f8c <alt_up_video_dma_draw_hline+0xf4>
		{
			IOWR_16DIRECT(addr, x << 1, symbol);
 4001f78:	8405883a 	add	r2,r16,r16
 4001f7c:	1445883a 	add	r2,r2,r17
 4001f80:	9807883a 	mov	r3,r19
 4001f84:	10c0002d 	sthio	r3,0(r2)
		for (x = x0; x <= x1; x++)
		{
			IOWR_8DIRECT(addr, x, symbol);
		}
	} else if (video_dma->data_width == 2) {
		for (x = x0; x <= x1; x++)
 4001f88:	84000044 	addi	r16,r16,1
 4001f8c:	943ffa2e 	bgeu	r18,r16,4001f78 <__alt_data_end+0xfc001f78>
		for (x = x0; x <= x1; x++)
		{
			IOWR_32DIRECT(addr, x << 2, symbol);
		}
	}
}
 4001f90:	00000706 	br	4001fb0 <alt_up_video_dma_draw_hline+0x118>
	}
	else
	{
		for (x = x0; x <= x1; x++)
		{
			IOWR_32DIRECT(addr, x << 2, symbol);
 4001f94:	8405883a 	add	r2,r16,r16
 4001f98:	1085883a 	add	r2,r2,r2
 4001f9c:	1445883a 	add	r2,r2,r17
 4001fa0:	9807883a 	mov	r3,r19
 4001fa4:	10c00035 	stwio	r3,0(r2)
			IOWR_16DIRECT(addr, x << 1, symbol);
		}
	}
	else
	{
		for (x = x0; x <= x1; x++)
 4001fa8:	84000044 	addi	r16,r16,1
 4001fac:	943ff92e 	bgeu	r18,r16,4001f94 <__alt_data_end+0xfc001f94>
		{
			IOWR_32DIRECT(addr, x << 2, symbol);
		}
	}
}
 4001fb0:	0001883a 	nop
 4001fb4:	e6fffc04 	addi	sp,fp,-16
 4001fb8:	dfc00517 	ldw	ra,20(sp)
 4001fbc:	df000417 	ldw	fp,16(sp)
 4001fc0:	dcc00317 	ldw	r19,12(sp)
 4001fc4:	dc800217 	ldw	r18,8(sp)
 4001fc8:	dc400117 	ldw	r17,4(sp)
 4001fcc:	dc000017 	ldw	r16,0(sp)
 4001fd0:	dec00604 	addi	sp,sp,24
 4001fd4:	f800283a 	ret

04001fd8 <alt_up_video_dma_draw_vline>:
		register unsigned int x, register unsigned int y0, register unsigned int y1, 
		int backbuffer)
/* This method draws a vertical line between points (x,y0) and (x,y1). This 
 * method is faster than using the line method because we know the direction 
 * of the line. */
{
 4001fd8:	defff704 	addi	sp,sp,-36
 4001fdc:	dfc00815 	stw	ra,32(sp)
 4001fe0:	df000715 	stw	fp,28(sp)
 4001fe4:	dd400615 	stw	r21,24(sp)
 4001fe8:	dd000515 	stw	r20,20(sp)
 4001fec:	dcc00415 	stw	r19,16(sp)
 4001ff0:	dc800315 	stw	r18,12(sp)
 4001ff4:	dc400215 	stw	r17,8(sp)
 4001ff8:	dc000115 	stw	r16,4(sp)
 4001ffc:	df000704 	addi	fp,sp,28
 4002000:	e13ff915 	stw	r4,-28(fp)
 4002004:	282b883a 	mov	r21,r5
 4002008:	3007883a 	mov	r3,r6
 400200c:	3821883a 	mov	r16,r7
 4002010:	e5000217 	ldw	r20,8(fp)
	register unsigned int addr = 0;
 4002014:	0023883a 	mov	r17,zero
	register unsigned int offset = 0;
 4002018:	0025883a 	mov	r18,zero
	register unsigned int y;
	register unsigned int y_inc;

	/* Set up the start address of the chosen frame buffer. */
	if (backbuffer == 1)
 400201c:	e0800317 	ldw	r2,12(fp)
 4002020:	10800058 	cmpnei	r2,r2,1
 4002024:	1000031e 	bne	r2,zero,4002034 <alt_up_video_dma_draw_vline+0x5c>
		addr = video_dma->back_buffer_start_address;
 4002028:	e0bff917 	ldw	r2,-28(fp)
 400202c:	14400c17 	ldw	r17,48(r2)
 4002030:	00000206 	br	400203c <alt_up_video_dma_draw_vline+0x64>
	else
		addr = video_dma->buffer_start_address;
 4002034:	e0bff917 	ldw	r2,-28(fp)
 4002038:	14400b17 	ldw	r17,44(r2)

	addr += (x << video_dma->x_coord_offset);
 400203c:	e0bff917 	ldw	r2,-28(fp)
 4002040:	10801317 	ldw	r2,76(r2)
 4002044:	1884983a 	sll	r2,r3,r2
 4002048:	88a3883a 	add	r17,r17,r2

	/* Calculate the y increment based on the addressing modes. */
	if (video_dma->addressing_mode == ALT_UP_VIDEO_DMA_XY_ADDRESS_MODE) {
 400204c:	e0bff917 	ldw	r2,-28(fp)
 4002050:	10800d17 	ldw	r2,52(r2)
 4002054:	1000061e 	bne	r2,zero,4002070 <alt_up_video_dma_draw_vline+0x98>
		y_inc = (1 << video_dma->y_coord_offset);
 4002058:	e0bff917 	ldw	r2,-28(fp)
 400205c:	10801517 	ldw	r2,84(r2)
 4002060:	00c00044 	movi	r3,1
 4002064:	1884983a 	sll	r2,r3,r2
 4002068:	1027883a 	mov	r19,r2
 400206c:	00000506 	br	4002084 <alt_up_video_dma_draw_vline+0xac>
	} else {
		y_inc = (video_dma->x_resolution << video_dma->x_coord_offset);
 4002070:	e0bff917 	ldw	r2,-28(fp)
 4002074:	10c01117 	ldw	r3,68(r2)
 4002078:	e0bff917 	ldw	r2,-28(fp)
 400207c:	10801317 	ldw	r2,76(r2)
 4002080:	18a6983a 	sll	r19,r3,r2
	}

	addr += y0 * y_inc;
 4002084:	980b883a 	mov	r5,r19
 4002088:	8009883a 	mov	r4,r16
 400208c:	40037d40 	call	40037d4 <__mulsi3>
 4002090:	88a3883a 	add	r17,r17,r2

	/* This portion of the code is purposefully replicated. This is because having a text for
	 * the mode would unnecessarily slow down the drawing of a horizontal line. */
	if (video_dma->data_width == 1) {
 4002094:	e0bff917 	ldw	r2,-28(fp)
 4002098:	10801017 	ldw	r2,64(r2)
 400209c:	10800058 	cmpnei	r2,r2,1
 40020a0:	1000081e 	bne	r2,zero,40020c4 <alt_up_video_dma_draw_vline+0xec>
		for (y = y0; y <= y1; y++)
 40020a4:	00000506 	br	40020bc <alt_up_video_dma_draw_vline+0xe4>
		{
			IOWR_8DIRECT(addr, offset, symbol);
 40020a8:	9445883a 	add	r2,r18,r17
 40020ac:	a807883a 	mov	r3,r21
 40020b0:	10c00025 	stbio	r3,0(r2)
			offset += y_inc;
 40020b4:	94e5883a 	add	r18,r18,r19
	addr += y0 * y_inc;

	/* This portion of the code is purposefully replicated. This is because having a text for
	 * the mode would unnecessarily slow down the drawing of a horizontal line. */
	if (video_dma->data_width == 1) {
		for (y = y0; y <= y1; y++)
 40020b8:	84000044 	addi	r16,r16,1
 40020bc:	a43ffa2e 	bgeu	r20,r16,40020a8 <__alt_data_end+0xfc0020a8>
		{
			IOWR_32DIRECT(addr, offset, symbol);
			offset += y_inc;
		}
	}
}
 40020c0:	00001206 	br	400210c <alt_up_video_dma_draw_vline+0x134>
		for (y = y0; y <= y1; y++)
		{
			IOWR_8DIRECT(addr, offset, symbol);
			offset += y_inc;
		}
	} else if (video_dma->data_width == 2) {
 40020c4:	e0bff917 	ldw	r2,-28(fp)
 40020c8:	10801017 	ldw	r2,64(r2)
 40020cc:	10800098 	cmpnei	r2,r2,2
 40020d0:	10000d1e 	bne	r2,zero,4002108 <alt_up_video_dma_draw_vline+0x130>
		for (y = y0; y <= y1; y++)
 40020d4:	00000506 	br	40020ec <alt_up_video_dma_draw_vline+0x114>
		{
			IOWR_16DIRECT(addr, offset, symbol);
 40020d8:	9445883a 	add	r2,r18,r17
 40020dc:	a807883a 	mov	r3,r21
 40020e0:	10c0002d 	sthio	r3,0(r2)
			offset += y_inc;
 40020e4:	94e5883a 	add	r18,r18,r19
		{
			IOWR_8DIRECT(addr, offset, symbol);
			offset += y_inc;
		}
	} else if (video_dma->data_width == 2) {
		for (y = y0; y <= y1; y++)
 40020e8:	84000044 	addi	r16,r16,1
 40020ec:	a43ffa2e 	bgeu	r20,r16,40020d8 <__alt_data_end+0xfc0020d8>
		{
			IOWR_32DIRECT(addr, offset, symbol);
			offset += y_inc;
		}
	}
}
 40020f0:	00000606 	br	400210c <alt_up_video_dma_draw_vline+0x134>
	}
	else
	{
		for (y = y0; y <= y1; y++)
		{
			IOWR_32DIRECT(addr, offset, symbol);
 40020f4:	9445883a 	add	r2,r18,r17
 40020f8:	a807883a 	mov	r3,r21
 40020fc:	10c00035 	stwio	r3,0(r2)
			offset += y_inc;
 4002100:	94e5883a 	add	r18,r18,r19
			offset += y_inc;
		}
	}
	else
	{
		for (y = y0; y <= y1; y++)
 4002104:	84000044 	addi	r16,r16,1
 4002108:	a43ffa2e 	bgeu	r20,r16,40020f4 <__alt_data_end+0xfc0020f4>
		{
			IOWR_32DIRECT(addr, offset, symbol);
			offset += y_inc;
		}
	}
}
 400210c:	0001883a 	nop
 4002110:	e6fffa04 	addi	sp,fp,-24
 4002114:	dfc00717 	ldw	ra,28(sp)
 4002118:	df000617 	ldw	fp,24(sp)
 400211c:	dd400517 	ldw	r21,20(sp)
 4002120:	dd000417 	ldw	r20,16(sp)
 4002124:	dcc00317 	ldw	r19,12(sp)
 4002128:	dc800217 	ldw	r18,8(sp)
 400212c:	dc400117 	ldw	r17,4(sp)
 4002130:	dc000017 	ldw	r16,0(sp)
 4002134:	dec00804 	addi	sp,sp,32
 4002138:	f800283a 	ret

0400213c <alt_up_video_dma_draw_rectangle>:

void alt_up_video_dma_draw_rectangle(alt_up_video_dma_dev *video_dma, register unsigned int symbol, 
		register unsigned int x0, register unsigned int y0, register unsigned int x1, register unsigned int y1, 
		int backbuffer)
{
 400213c:	defff704 	addi	sp,sp,-36
 4002140:	dfc00815 	stw	ra,32(sp)
 4002144:	df000715 	stw	fp,28(sp)
 4002148:	dcc00615 	stw	r19,24(sp)
 400214c:	dc800515 	stw	r18,20(sp)
 4002150:	dc400415 	stw	r17,16(sp)
 4002154:	dc000315 	stw	r16,12(sp)
 4002158:	df000704 	addi	fp,sp,28
 400215c:	e13ffb15 	stw	r4,-20(fp)
 4002160:	2825883a 	mov	r18,r5
 4002164:	3027883a 	mov	r19,r6
 4002168:	3823883a 	mov	r17,r7
 400216c:	e4000317 	ldw	r16,12(fp)
	alt_up_video_dma_draw_hline(video_dma, symbol, x0, x1, y0, backbuffer);
 4002170:	e0800417 	ldw	r2,16(fp)
 4002174:	d8800115 	stw	r2,4(sp)
 4002178:	dc400015 	stw	r17,0(sp)
 400217c:	e1c00217 	ldw	r7,8(fp)
 4002180:	980d883a 	mov	r6,r19
 4002184:	900b883a 	mov	r5,r18
 4002188:	e13ffb17 	ldw	r4,-20(fp)
 400218c:	4001e980 	call	4001e98 <alt_up_video_dma_draw_hline>
	alt_up_video_dma_draw_hline(video_dma, symbol, x0, x1, y1, backbuffer);
 4002190:	e0800417 	ldw	r2,16(fp)
 4002194:	d8800115 	stw	r2,4(sp)
 4002198:	dc000015 	stw	r16,0(sp)
 400219c:	e1c00217 	ldw	r7,8(fp)
 40021a0:	980d883a 	mov	r6,r19
 40021a4:	900b883a 	mov	r5,r18
 40021a8:	e13ffb17 	ldw	r4,-20(fp)
 40021ac:	4001e980 	call	4001e98 <alt_up_video_dma_draw_hline>
	alt_up_video_dma_draw_vline(video_dma, symbol, x0, y0, y1, backbuffer);
 40021b0:	e0800417 	ldw	r2,16(fp)
 40021b4:	d8800115 	stw	r2,4(sp)
 40021b8:	dc000015 	stw	r16,0(sp)
 40021bc:	880f883a 	mov	r7,r17
 40021c0:	980d883a 	mov	r6,r19
 40021c4:	900b883a 	mov	r5,r18
 40021c8:	e13ffb17 	ldw	r4,-20(fp)
 40021cc:	4001fd80 	call	4001fd8 <alt_up_video_dma_draw_vline>
	alt_up_video_dma_draw_vline(video_dma, symbol, x1, y0, y1, backbuffer);
 40021d0:	e0800417 	ldw	r2,16(fp)
 40021d4:	d8800115 	stw	r2,4(sp)
 40021d8:	dc000015 	stw	r16,0(sp)
 40021dc:	880f883a 	mov	r7,r17
 40021e0:	e1800217 	ldw	r6,8(fp)
 40021e4:	900b883a 	mov	r5,r18
 40021e8:	e13ffb17 	ldw	r4,-20(fp)
 40021ec:	4001fd80 	call	4001fd8 <alt_up_video_dma_draw_vline>
}
 40021f0:	0001883a 	nop
 40021f4:	e6fffc04 	addi	sp,fp,-16
 40021f8:	dfc00517 	ldw	ra,20(sp)
 40021fc:	df000417 	ldw	fp,16(sp)
 4002200:	dcc00317 	ldw	r19,12(sp)
 4002204:	dc800217 	ldw	r18,8(sp)
 4002208:	dc400117 	ldw	r17,4(sp)
 400220c:	dc000017 	ldw	r16,0(sp)
 4002210:	dec00604 	addi	sp,sp,24
 4002214:	f800283a 	ret

04002218 <alt_up_video_dma_draw_helper>:

void alt_up_video_dma_draw_helper(register unsigned int buffer_start, register unsigned int offset, 
		register unsigned int symbol, register unsigned int data_width)
/* This is a helper function that draws a symbol at a given offset from the base address. 
 * Note that no boundary checks are made, so drawing off-screen may cause unpredictable side effects. */
{
 4002218:	deffff04 	addi	sp,sp,-4
 400221c:	df000015 	stw	fp,0(sp)
 4002220:	d839883a 	mov	fp,sp
 4002224:	2005883a 	mov	r2,r4
 4002228:	2807883a 	mov	r3,r5
 400222c:	3809883a 	mov	r4,r7
	if (data_width == 1)
 4002230:	21400058 	cmpnei	r5,r4,1
 4002234:	2800041e 	bne	r5,zero,4002248 <alt_up_video_dma_draw_helper+0x30>
		IOWR_8DIRECT(buffer_start, offset, symbol);
 4002238:	1885883a 	add	r2,r3,r2
 400223c:	3007883a 	mov	r3,r6
 4002240:	10c00025 	stbio	r3,0(r2)
	else if (data_width == 2)
		IOWR_16DIRECT(buffer_start, offset, symbol);
	else
		IOWR_32DIRECT(buffer_start, offset, symbol);
}
 4002244:	00000906 	br	400226c <alt_up_video_dma_draw_helper+0x54>
/* This is a helper function that draws a symbol at a given offset from the base address. 
 * Note that no boundary checks are made, so drawing off-screen may cause unpredictable side effects. */
{
	if (data_width == 1)
		IOWR_8DIRECT(buffer_start, offset, symbol);
	else if (data_width == 2)
 4002248:	21000098 	cmpnei	r4,r4,2
 400224c:	2000041e 	bne	r4,zero,4002260 <alt_up_video_dma_draw_helper+0x48>
		IOWR_16DIRECT(buffer_start, offset, symbol);
 4002250:	1885883a 	add	r2,r3,r2
 4002254:	3007883a 	mov	r3,r6
 4002258:	10c0002d 	sthio	r3,0(r2)
	else
		IOWR_32DIRECT(buffer_start, offset, symbol);
}
 400225c:	00000306 	br	400226c <alt_up_video_dma_draw_helper+0x54>
	if (data_width == 1)
		IOWR_8DIRECT(buffer_start, offset, symbol);
	else if (data_width == 2)
		IOWR_16DIRECT(buffer_start, offset, symbol);
	else
		IOWR_32DIRECT(buffer_start, offset, symbol);
 4002260:	1885883a 	add	r2,r3,r2
 4002264:	3007883a 	mov	r3,r6
 4002268:	10c00035 	stwio	r3,0(r2)
}
 400226c:	0001883a 	nop
 4002270:	e037883a 	mov	sp,fp
 4002274:	df000017 	ldw	fp,0(sp)
 4002278:	dec00104 	addi	sp,sp,4
 400227c:	f800283a 	ret

04002280 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4002280:	defff504 	addi	sp,sp,-44
 4002284:	df000a15 	stw	fp,40(sp)
 4002288:	df000a04 	addi	fp,sp,40
 400228c:	e13ffc15 	stw	r4,-16(fp)
 4002290:	e17ffd15 	stw	r5,-12(fp)
 4002294:	e1bffe15 	stw	r6,-8(fp)
 4002298:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400229c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40022a0:	d0a5bc17 	ldw	r2,-26896(gp)
  
  if (alt_ticks_per_second ())
 40022a4:	10003c26 	beq	r2,zero,4002398 <alt_alarm_start+0x118>
  {
    if (alarm)
 40022a8:	e0bffc17 	ldw	r2,-16(fp)
 40022ac:	10003826 	beq	r2,zero,4002390 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40022b0:	e0bffc17 	ldw	r2,-16(fp)
 40022b4:	e0fffe17 	ldw	r3,-8(fp)
 40022b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40022bc:	e0bffc17 	ldw	r2,-16(fp)
 40022c0:	e0ffff17 	ldw	r3,-4(fp)
 40022c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40022c8:	0005303a 	rdctl	r2,status
 40022cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40022d0:	e0fff917 	ldw	r3,-28(fp)
 40022d4:	00bfff84 	movi	r2,-2
 40022d8:	1884703a 	and	r2,r3,r2
 40022dc:	1001703a 	wrctl	status,r2
  
  return context;
 40022e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40022e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40022e8:	d0a5bd17 	ldw	r2,-26892(gp)
      
      current_nticks = alt_nticks();
 40022ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40022f0:	e0fffd17 	ldw	r3,-12(fp)
 40022f4:	e0bff617 	ldw	r2,-40(fp)
 40022f8:	1885883a 	add	r2,r3,r2
 40022fc:	10c00044 	addi	r3,r2,1
 4002300:	e0bffc17 	ldw	r2,-16(fp)
 4002304:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4002308:	e0bffc17 	ldw	r2,-16(fp)
 400230c:	10c00217 	ldw	r3,8(r2)
 4002310:	e0bff617 	ldw	r2,-40(fp)
 4002314:	1880042e 	bgeu	r3,r2,4002328 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4002318:	e0bffc17 	ldw	r2,-16(fp)
 400231c:	00c00044 	movi	r3,1
 4002320:	10c00405 	stb	r3,16(r2)
 4002324:	00000206 	br	4002330 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4002328:	e0bffc17 	ldw	r2,-16(fp)
 400232c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4002330:	e0bffc17 	ldw	r2,-16(fp)
 4002334:	d0e00704 	addi	r3,gp,-32740
 4002338:	e0fffa15 	stw	r3,-24(fp)
 400233c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4002340:	e0bffb17 	ldw	r2,-20(fp)
 4002344:	e0fffa17 	ldw	r3,-24(fp)
 4002348:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400234c:	e0bffa17 	ldw	r2,-24(fp)
 4002350:	10c00017 	ldw	r3,0(r2)
 4002354:	e0bffb17 	ldw	r2,-20(fp)
 4002358:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400235c:	e0bffa17 	ldw	r2,-24(fp)
 4002360:	10800017 	ldw	r2,0(r2)
 4002364:	e0fffb17 	ldw	r3,-20(fp)
 4002368:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400236c:	e0bffa17 	ldw	r2,-24(fp)
 4002370:	e0fffb17 	ldw	r3,-20(fp)
 4002374:	10c00015 	stw	r3,0(r2)
 4002378:	e0bff817 	ldw	r2,-32(fp)
 400237c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002380:	e0bff717 	ldw	r2,-36(fp)
 4002384:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4002388:	0005883a 	mov	r2,zero
 400238c:	00000306 	br	400239c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4002390:	00bffa84 	movi	r2,-22
 4002394:	00000106 	br	400239c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4002398:	00bfde84 	movi	r2,-134
  }
}
 400239c:	e037883a 	mov	sp,fp
 40023a0:	df000017 	ldw	fp,0(sp)
 40023a4:	dec00104 	addi	sp,sp,4
 40023a8:	f800283a 	ret

040023ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40023ac:	defffe04 	addi	sp,sp,-8
 40023b0:	dfc00115 	stw	ra,4(sp)
 40023b4:	df000015 	stw	fp,0(sp)
 40023b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40023bc:	d0a00517 	ldw	r2,-32748(gp)
 40023c0:	10000326 	beq	r2,zero,40023d0 <alt_get_errno+0x24>
 40023c4:	d0a00517 	ldw	r2,-32748(gp)
 40023c8:	103ee83a 	callr	r2
 40023cc:	00000106 	br	40023d4 <alt_get_errno+0x28>
 40023d0:	d0a5bf04 	addi	r2,gp,-26884
}
 40023d4:	e037883a 	mov	sp,fp
 40023d8:	dfc00117 	ldw	ra,4(sp)
 40023dc:	df000017 	ldw	fp,0(sp)
 40023e0:	dec00204 	addi	sp,sp,8
 40023e4:	f800283a 	ret

040023e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40023e8:	defffb04 	addi	sp,sp,-20
 40023ec:	dfc00415 	stw	ra,16(sp)
 40023f0:	df000315 	stw	fp,12(sp)
 40023f4:	df000304 	addi	fp,sp,12
 40023f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40023fc:	e0bfff17 	ldw	r2,-4(fp)
 4002400:	10000816 	blt	r2,zero,4002424 <close+0x3c>
 4002404:	01400304 	movi	r5,12
 4002408:	e13fff17 	ldw	r4,-4(fp)
 400240c:	40037d40 	call	40037d4 <__mulsi3>
 4002410:	1007883a 	mov	r3,r2
 4002414:	00810034 	movhi	r2,1024
 4002418:	10925f04 	addi	r2,r2,18812
 400241c:	1885883a 	add	r2,r3,r2
 4002420:	00000106 	br	4002428 <close+0x40>
 4002424:	0005883a 	mov	r2,zero
 4002428:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400242c:	e0bffd17 	ldw	r2,-12(fp)
 4002430:	10001926 	beq	r2,zero,4002498 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4002434:	e0bffd17 	ldw	r2,-12(fp)
 4002438:	10800017 	ldw	r2,0(r2)
 400243c:	10800417 	ldw	r2,16(r2)
 4002440:	10000626 	beq	r2,zero,400245c <close+0x74>
 4002444:	e0bffd17 	ldw	r2,-12(fp)
 4002448:	10800017 	ldw	r2,0(r2)
 400244c:	10800417 	ldw	r2,16(r2)
 4002450:	e13ffd17 	ldw	r4,-12(fp)
 4002454:	103ee83a 	callr	r2
 4002458:	00000106 	br	4002460 <close+0x78>
 400245c:	0005883a 	mov	r2,zero
 4002460:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4002464:	e13fff17 	ldw	r4,-4(fp)
 4002468:	4002de00 	call	4002de0 <alt_release_fd>
    if (rval < 0)
 400246c:	e0bffe17 	ldw	r2,-8(fp)
 4002470:	1000070e 	bge	r2,zero,4002490 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4002474:	40023ac0 	call	40023ac <alt_get_errno>
 4002478:	1007883a 	mov	r3,r2
 400247c:	e0bffe17 	ldw	r2,-8(fp)
 4002480:	0085c83a 	sub	r2,zero,r2
 4002484:	18800015 	stw	r2,0(r3)
      return -1;
 4002488:	00bfffc4 	movi	r2,-1
 400248c:	00000706 	br	40024ac <close+0xc4>
    }
    return 0;
 4002490:	0005883a 	mov	r2,zero
 4002494:	00000506 	br	40024ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002498:	40023ac0 	call	40023ac <alt_get_errno>
 400249c:	1007883a 	mov	r3,r2
 40024a0:	00801444 	movi	r2,81
 40024a4:	18800015 	stw	r2,0(r3)
    return -1;
 40024a8:	00bfffc4 	movi	r2,-1
  }
}
 40024ac:	e037883a 	mov	sp,fp
 40024b0:	dfc00117 	ldw	ra,4(sp)
 40024b4:	df000017 	ldw	fp,0(sp)
 40024b8:	dec00204 	addi	sp,sp,8
 40024bc:	f800283a 	ret

040024c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40024c0:	deffff04 	addi	sp,sp,-4
 40024c4:	df000015 	stw	fp,0(sp)
 40024c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40024cc:	0001883a 	nop
 40024d0:	e037883a 	mov	sp,fp
 40024d4:	df000017 	ldw	fp,0(sp)
 40024d8:	dec00104 	addi	sp,sp,4
 40024dc:	f800283a 	ret

040024e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40024e0:	defffc04 	addi	sp,sp,-16
 40024e4:	df000315 	stw	fp,12(sp)
 40024e8:	df000304 	addi	fp,sp,12
 40024ec:	e13ffd15 	stw	r4,-12(fp)
 40024f0:	e17ffe15 	stw	r5,-8(fp)
 40024f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40024f8:	e0bfff17 	ldw	r2,-4(fp)
}
 40024fc:	e037883a 	mov	sp,fp
 4002500:	df000017 	ldw	fp,0(sp)
 4002504:	dec00104 	addi	sp,sp,4
 4002508:	f800283a 	ret

0400250c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400250c:	defffe04 	addi	sp,sp,-8
 4002510:	dfc00115 	stw	ra,4(sp)
 4002514:	df000015 	stw	fp,0(sp)
 4002518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400251c:	d0a00517 	ldw	r2,-32748(gp)
 4002520:	10000326 	beq	r2,zero,4002530 <alt_get_errno+0x24>
 4002524:	d0a00517 	ldw	r2,-32748(gp)
 4002528:	103ee83a 	callr	r2
 400252c:	00000106 	br	4002534 <alt_get_errno+0x28>
 4002530:	d0a5bf04 	addi	r2,gp,-26884
}
 4002534:	e037883a 	mov	sp,fp
 4002538:	dfc00117 	ldw	ra,4(sp)
 400253c:	df000017 	ldw	fp,0(sp)
 4002540:	dec00204 	addi	sp,sp,8
 4002544:	f800283a 	ret

04002548 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4002548:	defffa04 	addi	sp,sp,-24
 400254c:	dfc00515 	stw	ra,20(sp)
 4002550:	df000415 	stw	fp,16(sp)
 4002554:	df000404 	addi	fp,sp,16
 4002558:	e13ffe15 	stw	r4,-8(fp)
 400255c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4002560:	e0bffe17 	ldw	r2,-8(fp)
 4002564:	10000326 	beq	r2,zero,4002574 <alt_dev_llist_insert+0x2c>
 4002568:	e0bffe17 	ldw	r2,-8(fp)
 400256c:	10800217 	ldw	r2,8(r2)
 4002570:	1000061e 	bne	r2,zero,400258c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4002574:	400250c0 	call	400250c <alt_get_errno>
 4002578:	1007883a 	mov	r3,r2
 400257c:	00800584 	movi	r2,22
 4002580:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4002584:	00bffa84 	movi	r2,-22
 4002588:	00001306 	br	40025d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400258c:	e0bffe17 	ldw	r2,-8(fp)
 4002590:	e0ffff17 	ldw	r3,-4(fp)
 4002594:	e0fffc15 	stw	r3,-16(fp)
 4002598:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400259c:	e0bffd17 	ldw	r2,-12(fp)
 40025a0:	e0fffc17 	ldw	r3,-16(fp)
 40025a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40025a8:	e0bffc17 	ldw	r2,-16(fp)
 40025ac:	10c00017 	ldw	r3,0(r2)
 40025b0:	e0bffd17 	ldw	r2,-12(fp)
 40025b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40025b8:	e0bffc17 	ldw	r2,-16(fp)
 40025bc:	10800017 	ldw	r2,0(r2)
 40025c0:	e0fffd17 	ldw	r3,-12(fp)
 40025c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40025c8:	e0bffc17 	ldw	r2,-16(fp)
 40025cc:	e0fffd17 	ldw	r3,-12(fp)
 40025d0:	10c00015 	stw	r3,0(r2)

  return 0;  
 40025d4:	0005883a 	mov	r2,zero
}
 40025d8:	e037883a 	mov	sp,fp
 40025dc:	dfc00117 	ldw	ra,4(sp)
 40025e0:	df000017 	ldw	fp,0(sp)
 40025e4:	dec00204 	addi	sp,sp,8
 40025e8:	f800283a 	ret

040025ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40025ec:	defffd04 	addi	sp,sp,-12
 40025f0:	dfc00215 	stw	ra,8(sp)
 40025f4:	df000115 	stw	fp,4(sp)
 40025f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40025fc:	00810034 	movhi	r2,1024
 4002600:	108e0b04 	addi	r2,r2,14380
 4002604:	e0bfff15 	stw	r2,-4(fp)
 4002608:	00000606 	br	4002624 <_do_ctors+0x38>
        (*ctor) (); 
 400260c:	e0bfff17 	ldw	r2,-4(fp)
 4002610:	10800017 	ldw	r2,0(r2)
 4002614:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4002618:	e0bfff17 	ldw	r2,-4(fp)
 400261c:	10bfff04 	addi	r2,r2,-4
 4002620:	e0bfff15 	stw	r2,-4(fp)
 4002624:	e0ffff17 	ldw	r3,-4(fp)
 4002628:	00810034 	movhi	r2,1024
 400262c:	108e0c04 	addi	r2,r2,14384
 4002630:	18bff62e 	bgeu	r3,r2,400260c <__alt_data_end+0xfc00260c>
        (*ctor) (); 
}
 4002634:	0001883a 	nop
 4002638:	e037883a 	mov	sp,fp
 400263c:	dfc00117 	ldw	ra,4(sp)
 4002640:	df000017 	ldw	fp,0(sp)
 4002644:	dec00204 	addi	sp,sp,8
 4002648:	f800283a 	ret

0400264c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400264c:	defffd04 	addi	sp,sp,-12
 4002650:	dfc00215 	stw	ra,8(sp)
 4002654:	df000115 	stw	fp,4(sp)
 4002658:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400265c:	00810034 	movhi	r2,1024
 4002660:	108e0b04 	addi	r2,r2,14380
 4002664:	e0bfff15 	stw	r2,-4(fp)
 4002668:	00000606 	br	4002684 <_do_dtors+0x38>
        (*dtor) (); 
 400266c:	e0bfff17 	ldw	r2,-4(fp)
 4002670:	10800017 	ldw	r2,0(r2)
 4002674:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4002678:	e0bfff17 	ldw	r2,-4(fp)
 400267c:	10bfff04 	addi	r2,r2,-4
 4002680:	e0bfff15 	stw	r2,-4(fp)
 4002684:	e0ffff17 	ldw	r3,-4(fp)
 4002688:	00810034 	movhi	r2,1024
 400268c:	108e0c04 	addi	r2,r2,14384
 4002690:	18bff62e 	bgeu	r3,r2,400266c <__alt_data_end+0xfc00266c>
        (*dtor) (); 
}
 4002694:	0001883a 	nop
 4002698:	e037883a 	mov	sp,fp
 400269c:	dfc00117 	ldw	ra,4(sp)
 40026a0:	df000017 	ldw	fp,0(sp)
 40026a4:	dec00204 	addi	sp,sp,8
 40026a8:	f800283a 	ret

040026ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40026ac:	defffa04 	addi	sp,sp,-24
 40026b0:	dfc00515 	stw	ra,20(sp)
 40026b4:	df000415 	stw	fp,16(sp)
 40026b8:	df000404 	addi	fp,sp,16
 40026bc:	e13ffe15 	stw	r4,-8(fp)
 40026c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40026c4:	e0bfff17 	ldw	r2,-4(fp)
 40026c8:	10800017 	ldw	r2,0(r2)
 40026cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40026d0:	e13ffe17 	ldw	r4,-8(fp)
 40026d4:	40034a40 	call	40034a4 <strlen>
 40026d8:	10800044 	addi	r2,r2,1
 40026dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40026e0:	00000d06 	br	4002718 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40026e4:	e0bffc17 	ldw	r2,-16(fp)
 40026e8:	10800217 	ldw	r2,8(r2)
 40026ec:	e0fffd17 	ldw	r3,-12(fp)
 40026f0:	180d883a 	mov	r6,r3
 40026f4:	e17ffe17 	ldw	r5,-8(fp)
 40026f8:	1009883a 	mov	r4,r2
 40026fc:	40032e00 	call	40032e0 <memcmp>
 4002700:	1000021e 	bne	r2,zero,400270c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4002704:	e0bffc17 	ldw	r2,-16(fp)
 4002708:	00000706 	br	4002728 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400270c:	e0bffc17 	ldw	r2,-16(fp)
 4002710:	10800017 	ldw	r2,0(r2)
 4002714:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002718:	e0fffc17 	ldw	r3,-16(fp)
 400271c:	e0bfff17 	ldw	r2,-4(fp)
 4002720:	18bff01e 	bne	r3,r2,40026e4 <__alt_data_end+0xfc0026e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4002724:	0005883a 	mov	r2,zero
}
 4002728:	e037883a 	mov	sp,fp
 400272c:	dfc00117 	ldw	ra,4(sp)
 4002730:	df000017 	ldw	fp,0(sp)
 4002734:	dec00204 	addi	sp,sp,8
 4002738:	f800283a 	ret

0400273c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400273c:	deffff04 	addi	sp,sp,-4
 4002740:	df000015 	stw	fp,0(sp)
 4002744:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4002748:	0001883a 	nop
 400274c:	e037883a 	mov	sp,fp
 4002750:	df000017 	ldw	fp,0(sp)
 4002754:	dec00104 	addi	sp,sp,4
 4002758:	f800283a 	ret

0400275c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400275c:	defff904 	addi	sp,sp,-28
 4002760:	dfc00615 	stw	ra,24(sp)
 4002764:	df000515 	stw	fp,20(sp)
 4002768:	df000504 	addi	fp,sp,20
 400276c:	e13ffc15 	stw	r4,-16(fp)
 4002770:	e17ffd15 	stw	r5,-12(fp)
 4002774:	e1bffe15 	stw	r6,-8(fp)
 4002778:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400277c:	e0800217 	ldw	r2,8(fp)
 4002780:	d8800015 	stw	r2,0(sp)
 4002784:	e1ffff17 	ldw	r7,-4(fp)
 4002788:	e1bffe17 	ldw	r6,-8(fp)
 400278c:	e17ffd17 	ldw	r5,-12(fp)
 4002790:	e13ffc17 	ldw	r4,-16(fp)
 4002794:	400290c0 	call	400290c <alt_iic_isr_register>
}  
 4002798:	e037883a 	mov	sp,fp
 400279c:	dfc00117 	ldw	ra,4(sp)
 40027a0:	df000017 	ldw	fp,0(sp)
 40027a4:	dec00204 	addi	sp,sp,8
 40027a8:	f800283a 	ret

040027ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40027ac:	defff904 	addi	sp,sp,-28
 40027b0:	df000615 	stw	fp,24(sp)
 40027b4:	df000604 	addi	fp,sp,24
 40027b8:	e13ffe15 	stw	r4,-8(fp)
 40027bc:	e17fff15 	stw	r5,-4(fp)
 40027c0:	e0bfff17 	ldw	r2,-4(fp)
 40027c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40027c8:	0005303a 	rdctl	r2,status
 40027cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40027d0:	e0fffb17 	ldw	r3,-20(fp)
 40027d4:	00bfff84 	movi	r2,-2
 40027d8:	1884703a 	and	r2,r3,r2
 40027dc:	1001703a 	wrctl	status,r2
  
  return context;
 40027e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40027e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40027e8:	00c00044 	movi	r3,1
 40027ec:	e0bffa17 	ldw	r2,-24(fp)
 40027f0:	1884983a 	sll	r2,r3,r2
 40027f4:	1007883a 	mov	r3,r2
 40027f8:	d0a5bb17 	ldw	r2,-26900(gp)
 40027fc:	1884b03a 	or	r2,r3,r2
 4002800:	d0a5bb15 	stw	r2,-26900(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002804:	d0a5bb17 	ldw	r2,-26900(gp)
 4002808:	100170fa 	wrctl	ienable,r2
 400280c:	e0bffc17 	ldw	r2,-16(fp)
 4002810:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002814:	e0bffd17 	ldw	r2,-12(fp)
 4002818:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400281c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4002820:	0001883a 	nop
}
 4002824:	e037883a 	mov	sp,fp
 4002828:	df000017 	ldw	fp,0(sp)
 400282c:	dec00104 	addi	sp,sp,4
 4002830:	f800283a 	ret

04002834 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4002834:	defff904 	addi	sp,sp,-28
 4002838:	df000615 	stw	fp,24(sp)
 400283c:	df000604 	addi	fp,sp,24
 4002840:	e13ffe15 	stw	r4,-8(fp)
 4002844:	e17fff15 	stw	r5,-4(fp)
 4002848:	e0bfff17 	ldw	r2,-4(fp)
 400284c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002850:	0005303a 	rdctl	r2,status
 4002854:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002858:	e0fffb17 	ldw	r3,-20(fp)
 400285c:	00bfff84 	movi	r2,-2
 4002860:	1884703a 	and	r2,r3,r2
 4002864:	1001703a 	wrctl	status,r2
  
  return context;
 4002868:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400286c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4002870:	00c00044 	movi	r3,1
 4002874:	e0bffa17 	ldw	r2,-24(fp)
 4002878:	1884983a 	sll	r2,r3,r2
 400287c:	0084303a 	nor	r2,zero,r2
 4002880:	1007883a 	mov	r3,r2
 4002884:	d0a5bb17 	ldw	r2,-26900(gp)
 4002888:	1884703a 	and	r2,r3,r2
 400288c:	d0a5bb15 	stw	r2,-26900(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002890:	d0a5bb17 	ldw	r2,-26900(gp)
 4002894:	100170fa 	wrctl	ienable,r2
 4002898:	e0bffc17 	ldw	r2,-16(fp)
 400289c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40028a0:	e0bffd17 	ldw	r2,-12(fp)
 40028a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40028a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 40028ac:	0001883a 	nop
}
 40028b0:	e037883a 	mov	sp,fp
 40028b4:	df000017 	ldw	fp,0(sp)
 40028b8:	dec00104 	addi	sp,sp,4
 40028bc:	f800283a 	ret

040028c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40028c0:	defffc04 	addi	sp,sp,-16
 40028c4:	df000315 	stw	fp,12(sp)
 40028c8:	df000304 	addi	fp,sp,12
 40028cc:	e13ffe15 	stw	r4,-8(fp)
 40028d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40028d4:	000530fa 	rdctl	r2,ienable
 40028d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40028dc:	00c00044 	movi	r3,1
 40028e0:	e0bfff17 	ldw	r2,-4(fp)
 40028e4:	1884983a 	sll	r2,r3,r2
 40028e8:	1007883a 	mov	r3,r2
 40028ec:	e0bffd17 	ldw	r2,-12(fp)
 40028f0:	1884703a 	and	r2,r3,r2
 40028f4:	1004c03a 	cmpne	r2,r2,zero
 40028f8:	10803fcc 	andi	r2,r2,255
}
 40028fc:	e037883a 	mov	sp,fp
 4002900:	df000017 	ldw	fp,0(sp)
 4002904:	dec00104 	addi	sp,sp,4
 4002908:	f800283a 	ret

0400290c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400290c:	defff504 	addi	sp,sp,-44
 4002910:	dfc00a15 	stw	ra,40(sp)
 4002914:	df000915 	stw	fp,36(sp)
 4002918:	df000904 	addi	fp,sp,36
 400291c:	e13ffc15 	stw	r4,-16(fp)
 4002920:	e17ffd15 	stw	r5,-12(fp)
 4002924:	e1bffe15 	stw	r6,-8(fp)
 4002928:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400292c:	00bffa84 	movi	r2,-22
 4002930:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4002934:	e0bffd17 	ldw	r2,-12(fp)
 4002938:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400293c:	e0bff817 	ldw	r2,-32(fp)
 4002940:	10800808 	cmpgei	r2,r2,32
 4002944:	1000271e 	bne	r2,zero,40029e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002948:	0005303a 	rdctl	r2,status
 400294c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002950:	e0fffb17 	ldw	r3,-20(fp)
 4002954:	00bfff84 	movi	r2,-2
 4002958:	1884703a 	and	r2,r3,r2
 400295c:	1001703a 	wrctl	status,r2
  
  return context;
 4002960:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4002964:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4002968:	00810034 	movhi	r2,1024
 400296c:	10998804 	addi	r2,r2,26144
 4002970:	e0fff817 	ldw	r3,-32(fp)
 4002974:	180690fa 	slli	r3,r3,3
 4002978:	10c5883a 	add	r2,r2,r3
 400297c:	e0fffe17 	ldw	r3,-8(fp)
 4002980:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4002984:	00810034 	movhi	r2,1024
 4002988:	10998804 	addi	r2,r2,26144
 400298c:	e0fff817 	ldw	r3,-32(fp)
 4002990:	180690fa 	slli	r3,r3,3
 4002994:	10c5883a 	add	r2,r2,r3
 4002998:	10800104 	addi	r2,r2,4
 400299c:	e0ffff17 	ldw	r3,-4(fp)
 40029a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40029a4:	e0bffe17 	ldw	r2,-8(fp)
 40029a8:	10000526 	beq	r2,zero,40029c0 <alt_iic_isr_register+0xb4>
 40029ac:	e0bff817 	ldw	r2,-32(fp)
 40029b0:	100b883a 	mov	r5,r2
 40029b4:	e13ffc17 	ldw	r4,-16(fp)
 40029b8:	40027ac0 	call	40027ac <alt_ic_irq_enable>
 40029bc:	00000406 	br	40029d0 <alt_iic_isr_register+0xc4>
 40029c0:	e0bff817 	ldw	r2,-32(fp)
 40029c4:	100b883a 	mov	r5,r2
 40029c8:	e13ffc17 	ldw	r4,-16(fp)
 40029cc:	40028340 	call	4002834 <alt_ic_irq_disable>
 40029d0:	e0bff715 	stw	r2,-36(fp)
 40029d4:	e0bffa17 	ldw	r2,-24(fp)
 40029d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40029dc:	e0bff917 	ldw	r2,-28(fp)
 40029e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40029e4:	e0bff717 	ldw	r2,-36(fp)
}
 40029e8:	e037883a 	mov	sp,fp
 40029ec:	dfc00117 	ldw	ra,4(sp)
 40029f0:	df000017 	ldw	fp,0(sp)
 40029f4:	dec00204 	addi	sp,sp,8
 40029f8:	f800283a 	ret

040029fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40029fc:	defff804 	addi	sp,sp,-32
 4002a00:	dfc00715 	stw	ra,28(sp)
 4002a04:	df000615 	stw	fp,24(sp)
 4002a08:	dc000515 	stw	r16,20(sp)
 4002a0c:	df000604 	addi	fp,sp,24
 4002a10:	e13ffb15 	stw	r4,-20(fp)
 4002a14:	e17ffc15 	stw	r5,-16(fp)
 4002a18:	e1bffd15 	stw	r6,-12(fp)
 4002a1c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4002a20:	e1bffe17 	ldw	r6,-8(fp)
 4002a24:	e17ffd17 	ldw	r5,-12(fp)
 4002a28:	e13ffc17 	ldw	r4,-16(fp)
 4002a2c:	4002c840 	call	4002c84 <open>
 4002a30:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4002a34:	e0bffa17 	ldw	r2,-24(fp)
 4002a38:	10002216 	blt	r2,zero,4002ac4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4002a3c:	04010034 	movhi	r16,1024
 4002a40:	84125f04 	addi	r16,r16,18812
 4002a44:	e0bffa17 	ldw	r2,-24(fp)
 4002a48:	01400304 	movi	r5,12
 4002a4c:	1009883a 	mov	r4,r2
 4002a50:	40037d40 	call	40037d4 <__mulsi3>
 4002a54:	8085883a 	add	r2,r16,r2
 4002a58:	10c00017 	ldw	r3,0(r2)
 4002a5c:	e0bffb17 	ldw	r2,-20(fp)
 4002a60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4002a64:	04010034 	movhi	r16,1024
 4002a68:	84125f04 	addi	r16,r16,18812
 4002a6c:	e0bffa17 	ldw	r2,-24(fp)
 4002a70:	01400304 	movi	r5,12
 4002a74:	1009883a 	mov	r4,r2
 4002a78:	40037d40 	call	40037d4 <__mulsi3>
 4002a7c:	8085883a 	add	r2,r16,r2
 4002a80:	10800104 	addi	r2,r2,4
 4002a84:	10c00017 	ldw	r3,0(r2)
 4002a88:	e0bffb17 	ldw	r2,-20(fp)
 4002a8c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4002a90:	04010034 	movhi	r16,1024
 4002a94:	84125f04 	addi	r16,r16,18812
 4002a98:	e0bffa17 	ldw	r2,-24(fp)
 4002a9c:	01400304 	movi	r5,12
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	40037d40 	call	40037d4 <__mulsi3>
 4002aa8:	8085883a 	add	r2,r16,r2
 4002aac:	10800204 	addi	r2,r2,8
 4002ab0:	10c00017 	ldw	r3,0(r2)
 4002ab4:	e0bffb17 	ldw	r2,-20(fp)
 4002ab8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4002abc:	e13ffa17 	ldw	r4,-24(fp)
 4002ac0:	4002de00 	call	4002de0 <alt_release_fd>
  }
} 
 4002ac4:	0001883a 	nop
 4002ac8:	e6ffff04 	addi	sp,fp,-4
 4002acc:	dfc00217 	ldw	ra,8(sp)
 4002ad0:	df000117 	ldw	fp,4(sp)
 4002ad4:	dc000017 	ldw	r16,0(sp)
 4002ad8:	dec00304 	addi	sp,sp,12
 4002adc:	f800283a 	ret

04002ae0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4002ae0:	defffb04 	addi	sp,sp,-20
 4002ae4:	dfc00415 	stw	ra,16(sp)
 4002ae8:	df000315 	stw	fp,12(sp)
 4002aec:	df000304 	addi	fp,sp,12
 4002af0:	e13ffd15 	stw	r4,-12(fp)
 4002af4:	e17ffe15 	stw	r5,-8(fp)
 4002af8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4002afc:	01c07fc4 	movi	r7,511
 4002b00:	01800044 	movi	r6,1
 4002b04:	e17ffd17 	ldw	r5,-12(fp)
 4002b08:	01010034 	movhi	r4,1024
 4002b0c:	21126204 	addi	r4,r4,18824
 4002b10:	40029fc0 	call	40029fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4002b14:	01c07fc4 	movi	r7,511
 4002b18:	000d883a 	mov	r6,zero
 4002b1c:	e17ffe17 	ldw	r5,-8(fp)
 4002b20:	01010034 	movhi	r4,1024
 4002b24:	21125f04 	addi	r4,r4,18812
 4002b28:	40029fc0 	call	40029fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4002b2c:	01c07fc4 	movi	r7,511
 4002b30:	01800044 	movi	r6,1
 4002b34:	e17fff17 	ldw	r5,-4(fp)
 4002b38:	01010034 	movhi	r4,1024
 4002b3c:	21126504 	addi	r4,r4,18836
 4002b40:	40029fc0 	call	40029fc <alt_open_fd>
}  
 4002b44:	0001883a 	nop
 4002b48:	e037883a 	mov	sp,fp
 4002b4c:	dfc00117 	ldw	ra,4(sp)
 4002b50:	df000017 	ldw	fp,0(sp)
 4002b54:	dec00204 	addi	sp,sp,8
 4002b58:	f800283a 	ret

04002b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002b5c:	defffe04 	addi	sp,sp,-8
 4002b60:	dfc00115 	stw	ra,4(sp)
 4002b64:	df000015 	stw	fp,0(sp)
 4002b68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002b6c:	d0a00517 	ldw	r2,-32748(gp)
 4002b70:	10000326 	beq	r2,zero,4002b80 <alt_get_errno+0x24>
 4002b74:	d0a00517 	ldw	r2,-32748(gp)
 4002b78:	103ee83a 	callr	r2
 4002b7c:	00000106 	br	4002b84 <alt_get_errno+0x28>
 4002b80:	d0a5bf04 	addi	r2,gp,-26884
}
 4002b84:	e037883a 	mov	sp,fp
 4002b88:	dfc00117 	ldw	ra,4(sp)
 4002b8c:	df000017 	ldw	fp,0(sp)
 4002b90:	dec00204 	addi	sp,sp,8
 4002b94:	f800283a 	ret

04002b98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4002b98:	defffb04 	addi	sp,sp,-20
 4002b9c:	dfc00415 	stw	ra,16(sp)
 4002ba0:	df000315 	stw	fp,12(sp)
 4002ba4:	dc000215 	stw	r16,8(sp)
 4002ba8:	df000304 	addi	fp,sp,12
 4002bac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002bb0:	e0bffe17 	ldw	r2,-8(fp)
 4002bb4:	10800217 	ldw	r2,8(r2)
 4002bb8:	10d00034 	orhi	r3,r2,16384
 4002bbc:	e0bffe17 	ldw	r2,-8(fp)
 4002bc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002bc4:	e03ffd15 	stw	zero,-12(fp)
 4002bc8:	00002306 	br	4002c58 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002bcc:	04010034 	movhi	r16,1024
 4002bd0:	84125f04 	addi	r16,r16,18812
 4002bd4:	e0bffd17 	ldw	r2,-12(fp)
 4002bd8:	01400304 	movi	r5,12
 4002bdc:	1009883a 	mov	r4,r2
 4002be0:	40037d40 	call	40037d4 <__mulsi3>
 4002be4:	8085883a 	add	r2,r16,r2
 4002be8:	10c00017 	ldw	r3,0(r2)
 4002bec:	e0bffe17 	ldw	r2,-8(fp)
 4002bf0:	10800017 	ldw	r2,0(r2)
 4002bf4:	1880151e 	bne	r3,r2,4002c4c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002bf8:	04010034 	movhi	r16,1024
 4002bfc:	84125f04 	addi	r16,r16,18812
 4002c00:	e0bffd17 	ldw	r2,-12(fp)
 4002c04:	01400304 	movi	r5,12
 4002c08:	1009883a 	mov	r4,r2
 4002c0c:	40037d40 	call	40037d4 <__mulsi3>
 4002c10:	8085883a 	add	r2,r16,r2
 4002c14:	10800204 	addi	r2,r2,8
 4002c18:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002c1c:	10000b0e 	bge	r2,zero,4002c4c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4002c20:	01400304 	movi	r5,12
 4002c24:	e13ffd17 	ldw	r4,-12(fp)
 4002c28:	40037d40 	call	40037d4 <__mulsi3>
 4002c2c:	1007883a 	mov	r3,r2
 4002c30:	00810034 	movhi	r2,1024
 4002c34:	10925f04 	addi	r2,r2,18812
 4002c38:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002c3c:	e0bffe17 	ldw	r2,-8(fp)
 4002c40:	18800226 	beq	r3,r2,4002c4c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4002c44:	00bffcc4 	movi	r2,-13
 4002c48:	00000806 	br	4002c6c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002c4c:	e0bffd17 	ldw	r2,-12(fp)
 4002c50:	10800044 	addi	r2,r2,1
 4002c54:	e0bffd15 	stw	r2,-12(fp)
 4002c58:	d0a00417 	ldw	r2,-32752(gp)
 4002c5c:	1007883a 	mov	r3,r2
 4002c60:	e0bffd17 	ldw	r2,-12(fp)
 4002c64:	18bfd92e 	bgeu	r3,r2,4002bcc <__alt_data_end+0xfc002bcc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4002c68:	0005883a 	mov	r2,zero
}
 4002c6c:	e6ffff04 	addi	sp,fp,-4
 4002c70:	dfc00217 	ldw	ra,8(sp)
 4002c74:	df000117 	ldw	fp,4(sp)
 4002c78:	dc000017 	ldw	r16,0(sp)
 4002c7c:	dec00304 	addi	sp,sp,12
 4002c80:	f800283a 	ret

04002c84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4002c84:	defff604 	addi	sp,sp,-40
 4002c88:	dfc00915 	stw	ra,36(sp)
 4002c8c:	df000815 	stw	fp,32(sp)
 4002c90:	df000804 	addi	fp,sp,32
 4002c94:	e13ffd15 	stw	r4,-12(fp)
 4002c98:	e17ffe15 	stw	r5,-8(fp)
 4002c9c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4002ca0:	00bfffc4 	movi	r2,-1
 4002ca4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4002ca8:	00bffb44 	movi	r2,-19
 4002cac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4002cb0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4002cb4:	d1600204 	addi	r5,gp,-32760
 4002cb8:	e13ffd17 	ldw	r4,-12(fp)
 4002cbc:	40026ac0 	call	40026ac <alt_find_dev>
 4002cc0:	e0bff815 	stw	r2,-32(fp)
 4002cc4:	e0bff817 	ldw	r2,-32(fp)
 4002cc8:	1000051e 	bne	r2,zero,4002ce0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4002ccc:	e13ffd17 	ldw	r4,-12(fp)
 4002cd0:	400302c0 	call	400302c <alt_find_file>
 4002cd4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4002cd8:	00800044 	movi	r2,1
 4002cdc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4002ce0:	e0bff817 	ldw	r2,-32(fp)
 4002ce4:	10002b26 	beq	r2,zero,4002d94 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4002ce8:	e13ff817 	ldw	r4,-32(fp)
 4002cec:	40031340 	call	4003134 <alt_get_fd>
 4002cf0:	e0bff915 	stw	r2,-28(fp)
 4002cf4:	e0bff917 	ldw	r2,-28(fp)
 4002cf8:	1000030e 	bge	r2,zero,4002d08 <open+0x84>
    {
      status = index;
 4002cfc:	e0bff917 	ldw	r2,-28(fp)
 4002d00:	e0bffa15 	stw	r2,-24(fp)
 4002d04:	00002506 	br	4002d9c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4002d08:	01400304 	movi	r5,12
 4002d0c:	e13ff917 	ldw	r4,-28(fp)
 4002d10:	40037d40 	call	40037d4 <__mulsi3>
 4002d14:	1007883a 	mov	r3,r2
 4002d18:	00810034 	movhi	r2,1024
 4002d1c:	10925f04 	addi	r2,r2,18812
 4002d20:	1885883a 	add	r2,r3,r2
 4002d24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4002d28:	e0fffe17 	ldw	r3,-8(fp)
 4002d2c:	00900034 	movhi	r2,16384
 4002d30:	10bfffc4 	addi	r2,r2,-1
 4002d34:	1886703a 	and	r3,r3,r2
 4002d38:	e0bffc17 	ldw	r2,-16(fp)
 4002d3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4002d40:	e0bffb17 	ldw	r2,-20(fp)
 4002d44:	1000051e 	bne	r2,zero,4002d5c <open+0xd8>
 4002d48:	e13ffc17 	ldw	r4,-16(fp)
 4002d4c:	4002b980 	call	4002b98 <alt_file_locked>
 4002d50:	e0bffa15 	stw	r2,-24(fp)
 4002d54:	e0bffa17 	ldw	r2,-24(fp)
 4002d58:	10001016 	blt	r2,zero,4002d9c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4002d5c:	e0bff817 	ldw	r2,-32(fp)
 4002d60:	10800317 	ldw	r2,12(r2)
 4002d64:	10000826 	beq	r2,zero,4002d88 <open+0x104>
 4002d68:	e0bff817 	ldw	r2,-32(fp)
 4002d6c:	10800317 	ldw	r2,12(r2)
 4002d70:	e1ffff17 	ldw	r7,-4(fp)
 4002d74:	e1bffe17 	ldw	r6,-8(fp)
 4002d78:	e17ffd17 	ldw	r5,-12(fp)
 4002d7c:	e13ffc17 	ldw	r4,-16(fp)
 4002d80:	103ee83a 	callr	r2
 4002d84:	00000106 	br	4002d8c <open+0x108>
 4002d88:	0005883a 	mov	r2,zero
 4002d8c:	e0bffa15 	stw	r2,-24(fp)
 4002d90:	00000206 	br	4002d9c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4002d94:	00bffb44 	movi	r2,-19
 4002d98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4002d9c:	e0bffa17 	ldw	r2,-24(fp)
 4002da0:	1000090e 	bge	r2,zero,4002dc8 <open+0x144>
  {
    alt_release_fd (index);  
 4002da4:	e13ff917 	ldw	r4,-28(fp)
 4002da8:	4002de00 	call	4002de0 <alt_release_fd>
    ALT_ERRNO = -status;
 4002dac:	4002b5c0 	call	4002b5c <alt_get_errno>
 4002db0:	1007883a 	mov	r3,r2
 4002db4:	e0bffa17 	ldw	r2,-24(fp)
 4002db8:	0085c83a 	sub	r2,zero,r2
 4002dbc:	18800015 	stw	r2,0(r3)
    return -1;
 4002dc0:	00bfffc4 	movi	r2,-1
 4002dc4:	00000106 	br	4002dcc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4002dc8:	e0bff917 	ldw	r2,-28(fp)
}
 4002dcc:	e037883a 	mov	sp,fp
 4002dd0:	dfc00117 	ldw	ra,4(sp)
 4002dd4:	df000017 	ldw	fp,0(sp)
 4002dd8:	dec00204 	addi	sp,sp,8
 4002ddc:	f800283a 	ret

04002de0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4002de0:	defffc04 	addi	sp,sp,-16
 4002de4:	dfc00315 	stw	ra,12(sp)
 4002de8:	df000215 	stw	fp,8(sp)
 4002dec:	dc000115 	stw	r16,4(sp)
 4002df0:	df000204 	addi	fp,sp,8
 4002df4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4002df8:	e0bffe17 	ldw	r2,-8(fp)
 4002dfc:	108000d0 	cmplti	r2,r2,3
 4002e00:	1000111e 	bne	r2,zero,4002e48 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4002e04:	04010034 	movhi	r16,1024
 4002e08:	84125f04 	addi	r16,r16,18812
 4002e0c:	e0bffe17 	ldw	r2,-8(fp)
 4002e10:	01400304 	movi	r5,12
 4002e14:	1009883a 	mov	r4,r2
 4002e18:	40037d40 	call	40037d4 <__mulsi3>
 4002e1c:	8085883a 	add	r2,r16,r2
 4002e20:	10800204 	addi	r2,r2,8
 4002e24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4002e28:	04010034 	movhi	r16,1024
 4002e2c:	84125f04 	addi	r16,r16,18812
 4002e30:	e0bffe17 	ldw	r2,-8(fp)
 4002e34:	01400304 	movi	r5,12
 4002e38:	1009883a 	mov	r4,r2
 4002e3c:	40037d40 	call	40037d4 <__mulsi3>
 4002e40:	8085883a 	add	r2,r16,r2
 4002e44:	10000015 	stw	zero,0(r2)
  }
}
 4002e48:	0001883a 	nop
 4002e4c:	e6ffff04 	addi	sp,fp,-4
 4002e50:	dfc00217 	ldw	ra,8(sp)
 4002e54:	df000117 	ldw	fp,4(sp)
 4002e58:	dc000017 	ldw	r16,0(sp)
 4002e5c:	dec00304 	addi	sp,sp,12
 4002e60:	f800283a 	ret

04002e64 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4002e64:	defffa04 	addi	sp,sp,-24
 4002e68:	df000515 	stw	fp,20(sp)
 4002e6c:	df000504 	addi	fp,sp,20
 4002e70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002e74:	0005303a 	rdctl	r2,status
 4002e78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002e7c:	e0fffc17 	ldw	r3,-16(fp)
 4002e80:	00bfff84 	movi	r2,-2
 4002e84:	1884703a 	and	r2,r3,r2
 4002e88:	1001703a 	wrctl	status,r2
  
  return context;
 4002e8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4002e90:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4002e94:	e0bfff17 	ldw	r2,-4(fp)
 4002e98:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4002e9c:	e0bffd17 	ldw	r2,-12(fp)
 4002ea0:	10800017 	ldw	r2,0(r2)
 4002ea4:	e0fffd17 	ldw	r3,-12(fp)
 4002ea8:	18c00117 	ldw	r3,4(r3)
 4002eac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4002eb0:	e0bffd17 	ldw	r2,-12(fp)
 4002eb4:	10800117 	ldw	r2,4(r2)
 4002eb8:	e0fffd17 	ldw	r3,-12(fp)
 4002ebc:	18c00017 	ldw	r3,0(r3)
 4002ec0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4002ec4:	e0bffd17 	ldw	r2,-12(fp)
 4002ec8:	e0fffd17 	ldw	r3,-12(fp)
 4002ecc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4002ed0:	e0bffd17 	ldw	r2,-12(fp)
 4002ed4:	e0fffd17 	ldw	r3,-12(fp)
 4002ed8:	10c00015 	stw	r3,0(r2)
 4002edc:	e0bffb17 	ldw	r2,-20(fp)
 4002ee0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002ee4:	e0bffe17 	ldw	r2,-8(fp)
 4002ee8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4002eec:	0001883a 	nop
 4002ef0:	e037883a 	mov	sp,fp
 4002ef4:	df000017 	ldw	fp,0(sp)
 4002ef8:	dec00104 	addi	sp,sp,4
 4002efc:	f800283a 	ret

04002f00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4002f00:	defffb04 	addi	sp,sp,-20
 4002f04:	dfc00415 	stw	ra,16(sp)
 4002f08:	df000315 	stw	fp,12(sp)
 4002f0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4002f10:	d0a00717 	ldw	r2,-32740(gp)
 4002f14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4002f18:	d0a5bd17 	ldw	r2,-26892(gp)
 4002f1c:	10800044 	addi	r2,r2,1
 4002f20:	d0a5bd15 	stw	r2,-26892(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002f24:	00002e06 	br	4002fe0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4002f28:	e0bffd17 	ldw	r2,-12(fp)
 4002f2c:	10800017 	ldw	r2,0(r2)
 4002f30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4002f34:	e0bffd17 	ldw	r2,-12(fp)
 4002f38:	10800403 	ldbu	r2,16(r2)
 4002f3c:	10803fcc 	andi	r2,r2,255
 4002f40:	10000426 	beq	r2,zero,4002f54 <alt_tick+0x54>
 4002f44:	d0a5bd17 	ldw	r2,-26892(gp)
 4002f48:	1000021e 	bne	r2,zero,4002f54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4002f4c:	e0bffd17 	ldw	r2,-12(fp)
 4002f50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4002f54:	e0bffd17 	ldw	r2,-12(fp)
 4002f58:	10800217 	ldw	r2,8(r2)
 4002f5c:	d0e5bd17 	ldw	r3,-26892(gp)
 4002f60:	18801d36 	bltu	r3,r2,4002fd8 <alt_tick+0xd8>
 4002f64:	e0bffd17 	ldw	r2,-12(fp)
 4002f68:	10800403 	ldbu	r2,16(r2)
 4002f6c:	10803fcc 	andi	r2,r2,255
 4002f70:	1000191e 	bne	r2,zero,4002fd8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4002f74:	e0bffd17 	ldw	r2,-12(fp)
 4002f78:	10800317 	ldw	r2,12(r2)
 4002f7c:	e0fffd17 	ldw	r3,-12(fp)
 4002f80:	18c00517 	ldw	r3,20(r3)
 4002f84:	1809883a 	mov	r4,r3
 4002f88:	103ee83a 	callr	r2
 4002f8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4002f90:	e0bfff17 	ldw	r2,-4(fp)
 4002f94:	1000031e 	bne	r2,zero,4002fa4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4002f98:	e13ffd17 	ldw	r4,-12(fp)
 4002f9c:	4002e640 	call	4002e64 <alt_alarm_stop>
 4002fa0:	00000d06 	br	4002fd8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4002fa4:	e0bffd17 	ldw	r2,-12(fp)
 4002fa8:	10c00217 	ldw	r3,8(r2)
 4002fac:	e0bfff17 	ldw	r2,-4(fp)
 4002fb0:	1887883a 	add	r3,r3,r2
 4002fb4:	e0bffd17 	ldw	r2,-12(fp)
 4002fb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4002fbc:	e0bffd17 	ldw	r2,-12(fp)
 4002fc0:	10c00217 	ldw	r3,8(r2)
 4002fc4:	d0a5bd17 	ldw	r2,-26892(gp)
 4002fc8:	1880032e 	bgeu	r3,r2,4002fd8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4002fcc:	e0bffd17 	ldw	r2,-12(fp)
 4002fd0:	00c00044 	movi	r3,1
 4002fd4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4002fd8:	e0bffe17 	ldw	r2,-8(fp)
 4002fdc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002fe0:	e0fffd17 	ldw	r3,-12(fp)
 4002fe4:	d0a00704 	addi	r2,gp,-32740
 4002fe8:	18bfcf1e 	bne	r3,r2,4002f28 <__alt_data_end+0xfc002f28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4002fec:	0001883a 	nop
}
 4002ff0:	0001883a 	nop
 4002ff4:	e037883a 	mov	sp,fp
 4002ff8:	dfc00117 	ldw	ra,4(sp)
 4002ffc:	df000017 	ldw	fp,0(sp)
 4003000:	dec00204 	addi	sp,sp,8
 4003004:	f800283a 	ret

04003008 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4003008:	deffff04 	addi	sp,sp,-4
 400300c:	df000015 	stw	fp,0(sp)
 4003010:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4003014:	000170fa 	wrctl	ienable,zero
}
 4003018:	0001883a 	nop
 400301c:	e037883a 	mov	sp,fp
 4003020:	df000017 	ldw	fp,0(sp)
 4003024:	dec00104 	addi	sp,sp,4
 4003028:	f800283a 	ret

0400302c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400302c:	defffb04 	addi	sp,sp,-20
 4003030:	dfc00415 	stw	ra,16(sp)
 4003034:	df000315 	stw	fp,12(sp)
 4003038:	df000304 	addi	fp,sp,12
 400303c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4003040:	d0a00017 	ldw	r2,-32768(gp)
 4003044:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4003048:	00003106 	br	4003110 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400304c:	e0bffd17 	ldw	r2,-12(fp)
 4003050:	10800217 	ldw	r2,8(r2)
 4003054:	1009883a 	mov	r4,r2
 4003058:	40034a40 	call	40034a4 <strlen>
 400305c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4003060:	e0bffd17 	ldw	r2,-12(fp)
 4003064:	10c00217 	ldw	r3,8(r2)
 4003068:	e0bffe17 	ldw	r2,-8(fp)
 400306c:	10bfffc4 	addi	r2,r2,-1
 4003070:	1885883a 	add	r2,r3,r2
 4003074:	10800003 	ldbu	r2,0(r2)
 4003078:	10803fcc 	andi	r2,r2,255
 400307c:	1080201c 	xori	r2,r2,128
 4003080:	10bfe004 	addi	r2,r2,-128
 4003084:	10800bd8 	cmpnei	r2,r2,47
 4003088:	1000031e 	bne	r2,zero,4003098 <alt_find_file+0x6c>
    {
      len -= 1;
 400308c:	e0bffe17 	ldw	r2,-8(fp)
 4003090:	10bfffc4 	addi	r2,r2,-1
 4003094:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4003098:	e0bffe17 	ldw	r2,-8(fp)
 400309c:	e0ffff17 	ldw	r3,-4(fp)
 40030a0:	1885883a 	add	r2,r3,r2
 40030a4:	10800003 	ldbu	r2,0(r2)
 40030a8:	10803fcc 	andi	r2,r2,255
 40030ac:	1080201c 	xori	r2,r2,128
 40030b0:	10bfe004 	addi	r2,r2,-128
 40030b4:	10800be0 	cmpeqi	r2,r2,47
 40030b8:	1000081e 	bne	r2,zero,40030dc <alt_find_file+0xb0>
 40030bc:	e0bffe17 	ldw	r2,-8(fp)
 40030c0:	e0ffff17 	ldw	r3,-4(fp)
 40030c4:	1885883a 	add	r2,r3,r2
 40030c8:	10800003 	ldbu	r2,0(r2)
 40030cc:	10803fcc 	andi	r2,r2,255
 40030d0:	1080201c 	xori	r2,r2,128
 40030d4:	10bfe004 	addi	r2,r2,-128
 40030d8:	10000a1e 	bne	r2,zero,4003104 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40030dc:	e0bffd17 	ldw	r2,-12(fp)
 40030e0:	10800217 	ldw	r2,8(r2)
 40030e4:	e0fffe17 	ldw	r3,-8(fp)
 40030e8:	180d883a 	mov	r6,r3
 40030ec:	e17fff17 	ldw	r5,-4(fp)
 40030f0:	1009883a 	mov	r4,r2
 40030f4:	40032e00 	call	40032e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40030f8:	1000021e 	bne	r2,zero,4003104 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40030fc:	e0bffd17 	ldw	r2,-12(fp)
 4003100:	00000706 	br	4003120 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4003104:	e0bffd17 	ldw	r2,-12(fp)
 4003108:	10800017 	ldw	r2,0(r2)
 400310c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4003110:	e0fffd17 	ldw	r3,-12(fp)
 4003114:	d0a00004 	addi	r2,gp,-32768
 4003118:	18bfcc1e 	bne	r3,r2,400304c <__alt_data_end+0xfc00304c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400311c:	0005883a 	mov	r2,zero
}
 4003120:	e037883a 	mov	sp,fp
 4003124:	dfc00117 	ldw	ra,4(sp)
 4003128:	df000017 	ldw	fp,0(sp)
 400312c:	dec00204 	addi	sp,sp,8
 4003130:	f800283a 	ret

04003134 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4003134:	defffa04 	addi	sp,sp,-24
 4003138:	dfc00515 	stw	ra,20(sp)
 400313c:	df000415 	stw	fp,16(sp)
 4003140:	dc000315 	stw	r16,12(sp)
 4003144:	df000404 	addi	fp,sp,16
 4003148:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 400314c:	00bffa04 	movi	r2,-24
 4003150:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4003154:	e03ffc15 	stw	zero,-16(fp)
 4003158:	00001d06 	br	40031d0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 400315c:	04010034 	movhi	r16,1024
 4003160:	84125f04 	addi	r16,r16,18812
 4003164:	e0bffc17 	ldw	r2,-16(fp)
 4003168:	01400304 	movi	r5,12
 400316c:	1009883a 	mov	r4,r2
 4003170:	40037d40 	call	40037d4 <__mulsi3>
 4003174:	8085883a 	add	r2,r16,r2
 4003178:	10800017 	ldw	r2,0(r2)
 400317c:	1000111e 	bne	r2,zero,40031c4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4003180:	04010034 	movhi	r16,1024
 4003184:	84125f04 	addi	r16,r16,18812
 4003188:	e0bffc17 	ldw	r2,-16(fp)
 400318c:	01400304 	movi	r5,12
 4003190:	1009883a 	mov	r4,r2
 4003194:	40037d40 	call	40037d4 <__mulsi3>
 4003198:	8085883a 	add	r2,r16,r2
 400319c:	e0fffe17 	ldw	r3,-8(fp)
 40031a0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40031a4:	d0e00417 	ldw	r3,-32752(gp)
 40031a8:	e0bffc17 	ldw	r2,-16(fp)
 40031ac:	1880020e 	bge	r3,r2,40031b8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40031b0:	e0bffc17 	ldw	r2,-16(fp)
 40031b4:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 40031b8:	e0bffc17 	ldw	r2,-16(fp)
 40031bc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40031c0:	00000606 	br	40031dc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40031c4:	e0bffc17 	ldw	r2,-16(fp)
 40031c8:	10800044 	addi	r2,r2,1
 40031cc:	e0bffc15 	stw	r2,-16(fp)
 40031d0:	e0bffc17 	ldw	r2,-16(fp)
 40031d4:	10800810 	cmplti	r2,r2,32
 40031d8:	103fe01e 	bne	r2,zero,400315c <__alt_data_end+0xfc00315c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40031dc:	e0bffd17 	ldw	r2,-12(fp)
}
 40031e0:	e6ffff04 	addi	sp,fp,-4
 40031e4:	dfc00217 	ldw	ra,8(sp)
 40031e8:	df000117 	ldw	fp,4(sp)
 40031ec:	dc000017 	ldw	r16,0(sp)
 40031f0:	dec00304 	addi	sp,sp,12
 40031f4:	f800283a 	ret

040031f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40031f8:	defffe04 	addi	sp,sp,-8
 40031fc:	df000115 	stw	fp,4(sp)
 4003200:	df000104 	addi	fp,sp,4
 4003204:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4003208:	e0bfff17 	ldw	r2,-4(fp)
 400320c:	10bffe84 	addi	r2,r2,-6
 4003210:	10c00428 	cmpgeui	r3,r2,16
 4003214:	18001a1e 	bne	r3,zero,4003280 <alt_exception_cause_generated_bad_addr+0x88>
 4003218:	100690ba 	slli	r3,r2,2
 400321c:	00810034 	movhi	r2,1024
 4003220:	108c8c04 	addi	r2,r2,12848
 4003224:	1885883a 	add	r2,r3,r2
 4003228:	10800017 	ldw	r2,0(r2)
 400322c:	1000683a 	jmp	r2
 4003230:	04003270 	cmpltui	r16,zero,201
 4003234:	04003270 	cmpltui	r16,zero,201
 4003238:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 400323c:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 4003240:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 4003244:	04003270 	cmpltui	r16,zero,201
 4003248:	04003278 	rdprs	r16,zero,201
 400324c:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 4003250:	04003270 	cmpltui	r16,zero,201
 4003254:	04003270 	cmpltui	r16,zero,201
 4003258:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 400325c:	04003270 	cmpltui	r16,zero,201
 4003260:	04003278 	rdprs	r16,zero,201
 4003264:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 4003268:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 400326c:	04003270 	cmpltui	r16,zero,201
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4003270:	00800044 	movi	r2,1
 4003274:	00000306 	br	4003284 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4003278:	0005883a 	mov	r2,zero
 400327c:	00000106 	br	4003284 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4003280:	0005883a 	mov	r2,zero
  }
}
 4003284:	e037883a 	mov	sp,fp
 4003288:	df000017 	ldw	fp,0(sp)
 400328c:	dec00104 	addi	sp,sp,4
 4003290:	f800283a 	ret

04003294 <atexit>:
 4003294:	200b883a 	mov	r5,r4
 4003298:	000f883a 	mov	r7,zero
 400329c:	000d883a 	mov	r6,zero
 40032a0:	0009883a 	mov	r4,zero
 40032a4:	400353c1 	jmpi	400353c <__register_exitproc>

040032a8 <exit>:
 40032a8:	defffe04 	addi	sp,sp,-8
 40032ac:	000b883a 	mov	r5,zero
 40032b0:	dc000015 	stw	r16,0(sp)
 40032b4:	dfc00115 	stw	ra,4(sp)
 40032b8:	2021883a 	mov	r16,r4
 40032bc:	40036540 	call	4003654 <__call_exitprocs>
 40032c0:	00810034 	movhi	r2,1024
 40032c4:	1093d104 	addi	r2,r2,20292
 40032c8:	11000017 	ldw	r4,0(r2)
 40032cc:	20800f17 	ldw	r2,60(r4)
 40032d0:	10000126 	beq	r2,zero,40032d8 <exit+0x30>
 40032d4:	103ee83a 	callr	r2
 40032d8:	8009883a 	mov	r4,r16
 40032dc:	40037fc0 	call	40037fc <_exit>

040032e0 <memcmp>:
 40032e0:	01c000c4 	movi	r7,3
 40032e4:	3980192e 	bgeu	r7,r6,400334c <memcmp+0x6c>
 40032e8:	2144b03a 	or	r2,r4,r5
 40032ec:	11c4703a 	and	r2,r2,r7
 40032f0:	10000f26 	beq	r2,zero,4003330 <memcmp+0x50>
 40032f4:	20800003 	ldbu	r2,0(r4)
 40032f8:	28c00003 	ldbu	r3,0(r5)
 40032fc:	10c0151e 	bne	r2,r3,4003354 <memcmp+0x74>
 4003300:	31bfff84 	addi	r6,r6,-2
 4003304:	01ffffc4 	movi	r7,-1
 4003308:	00000406 	br	400331c <memcmp+0x3c>
 400330c:	20800003 	ldbu	r2,0(r4)
 4003310:	28c00003 	ldbu	r3,0(r5)
 4003314:	31bfffc4 	addi	r6,r6,-1
 4003318:	10c00e1e 	bne	r2,r3,4003354 <memcmp+0x74>
 400331c:	21000044 	addi	r4,r4,1
 4003320:	29400044 	addi	r5,r5,1
 4003324:	31fff91e 	bne	r6,r7,400330c <__alt_data_end+0xfc00330c>
 4003328:	0005883a 	mov	r2,zero
 400332c:	f800283a 	ret
 4003330:	20c00017 	ldw	r3,0(r4)
 4003334:	28800017 	ldw	r2,0(r5)
 4003338:	18bfee1e 	bne	r3,r2,40032f4 <__alt_data_end+0xfc0032f4>
 400333c:	31bfff04 	addi	r6,r6,-4
 4003340:	21000104 	addi	r4,r4,4
 4003344:	29400104 	addi	r5,r5,4
 4003348:	39bff936 	bltu	r7,r6,4003330 <__alt_data_end+0xfc003330>
 400334c:	303fe91e 	bne	r6,zero,40032f4 <__alt_data_end+0xfc0032f4>
 4003350:	003ff506 	br	4003328 <__alt_data_end+0xfc003328>
 4003354:	10c5c83a 	sub	r2,r2,r3
 4003358:	f800283a 	ret

0400335c <memcpy>:
 400335c:	defffd04 	addi	sp,sp,-12
 4003360:	dfc00215 	stw	ra,8(sp)
 4003364:	dc400115 	stw	r17,4(sp)
 4003368:	dc000015 	stw	r16,0(sp)
 400336c:	00c003c4 	movi	r3,15
 4003370:	2005883a 	mov	r2,r4
 4003374:	1980452e 	bgeu	r3,r6,400348c <memcpy+0x130>
 4003378:	2906b03a 	or	r3,r5,r4
 400337c:	18c000cc 	andi	r3,r3,3
 4003380:	1800441e 	bne	r3,zero,4003494 <memcpy+0x138>
 4003384:	347ffc04 	addi	r17,r6,-16
 4003388:	8822d13a 	srli	r17,r17,4
 400338c:	28c00104 	addi	r3,r5,4
 4003390:	23400104 	addi	r13,r4,4
 4003394:	8820913a 	slli	r16,r17,4
 4003398:	2b000204 	addi	r12,r5,8
 400339c:	22c00204 	addi	r11,r4,8
 40033a0:	84000504 	addi	r16,r16,20
 40033a4:	2a800304 	addi	r10,r5,12
 40033a8:	22400304 	addi	r9,r4,12
 40033ac:	2c21883a 	add	r16,r5,r16
 40033b0:	2811883a 	mov	r8,r5
 40033b4:	200f883a 	mov	r7,r4
 40033b8:	41000017 	ldw	r4,0(r8)
 40033bc:	1fc00017 	ldw	ra,0(r3)
 40033c0:	63c00017 	ldw	r15,0(r12)
 40033c4:	39000015 	stw	r4,0(r7)
 40033c8:	53800017 	ldw	r14,0(r10)
 40033cc:	6fc00015 	stw	ra,0(r13)
 40033d0:	5bc00015 	stw	r15,0(r11)
 40033d4:	4b800015 	stw	r14,0(r9)
 40033d8:	18c00404 	addi	r3,r3,16
 40033dc:	39c00404 	addi	r7,r7,16
 40033e0:	42000404 	addi	r8,r8,16
 40033e4:	6b400404 	addi	r13,r13,16
 40033e8:	63000404 	addi	r12,r12,16
 40033ec:	5ac00404 	addi	r11,r11,16
 40033f0:	52800404 	addi	r10,r10,16
 40033f4:	4a400404 	addi	r9,r9,16
 40033f8:	1c3fef1e 	bne	r3,r16,40033b8 <__alt_data_end+0xfc0033b8>
 40033fc:	89c00044 	addi	r7,r17,1
 4003400:	380e913a 	slli	r7,r7,4
 4003404:	310003cc 	andi	r4,r6,15
 4003408:	02c000c4 	movi	r11,3
 400340c:	11c7883a 	add	r3,r2,r7
 4003410:	29cb883a 	add	r5,r5,r7
 4003414:	5900212e 	bgeu	r11,r4,400349c <memcpy+0x140>
 4003418:	1813883a 	mov	r9,r3
 400341c:	2811883a 	mov	r8,r5
 4003420:	200f883a 	mov	r7,r4
 4003424:	42800017 	ldw	r10,0(r8)
 4003428:	4a400104 	addi	r9,r9,4
 400342c:	39ffff04 	addi	r7,r7,-4
 4003430:	4abfff15 	stw	r10,-4(r9)
 4003434:	42000104 	addi	r8,r8,4
 4003438:	59fffa36 	bltu	r11,r7,4003424 <__alt_data_end+0xfc003424>
 400343c:	213fff04 	addi	r4,r4,-4
 4003440:	2008d0ba 	srli	r4,r4,2
 4003444:	318000cc 	andi	r6,r6,3
 4003448:	21000044 	addi	r4,r4,1
 400344c:	2109883a 	add	r4,r4,r4
 4003450:	2109883a 	add	r4,r4,r4
 4003454:	1907883a 	add	r3,r3,r4
 4003458:	290b883a 	add	r5,r5,r4
 400345c:	30000626 	beq	r6,zero,4003478 <memcpy+0x11c>
 4003460:	198d883a 	add	r6,r3,r6
 4003464:	29c00003 	ldbu	r7,0(r5)
 4003468:	18c00044 	addi	r3,r3,1
 400346c:	29400044 	addi	r5,r5,1
 4003470:	19ffffc5 	stb	r7,-1(r3)
 4003474:	19bffb1e 	bne	r3,r6,4003464 <__alt_data_end+0xfc003464>
 4003478:	dfc00217 	ldw	ra,8(sp)
 400347c:	dc400117 	ldw	r17,4(sp)
 4003480:	dc000017 	ldw	r16,0(sp)
 4003484:	dec00304 	addi	sp,sp,12
 4003488:	f800283a 	ret
 400348c:	2007883a 	mov	r3,r4
 4003490:	003ff206 	br	400345c <__alt_data_end+0xfc00345c>
 4003494:	2007883a 	mov	r3,r4
 4003498:	003ff106 	br	4003460 <__alt_data_end+0xfc003460>
 400349c:	200d883a 	mov	r6,r4
 40034a0:	003fee06 	br	400345c <__alt_data_end+0xfc00345c>

040034a4 <strlen>:
 40034a4:	208000cc 	andi	r2,r4,3
 40034a8:	10002026 	beq	r2,zero,400352c <strlen+0x88>
 40034ac:	20800007 	ldb	r2,0(r4)
 40034b0:	10002026 	beq	r2,zero,4003534 <strlen+0x90>
 40034b4:	2005883a 	mov	r2,r4
 40034b8:	00000206 	br	40034c4 <strlen+0x20>
 40034bc:	10c00007 	ldb	r3,0(r2)
 40034c0:	18001826 	beq	r3,zero,4003524 <strlen+0x80>
 40034c4:	10800044 	addi	r2,r2,1
 40034c8:	10c000cc 	andi	r3,r2,3
 40034cc:	183ffb1e 	bne	r3,zero,40034bc <__alt_data_end+0xfc0034bc>
 40034d0:	10c00017 	ldw	r3,0(r2)
 40034d4:	01ffbff4 	movhi	r7,65279
 40034d8:	39ffbfc4 	addi	r7,r7,-257
 40034dc:	00ca303a 	nor	r5,zero,r3
 40034e0:	01a02074 	movhi	r6,32897
 40034e4:	19c7883a 	add	r3,r3,r7
 40034e8:	31a02004 	addi	r6,r6,-32640
 40034ec:	1946703a 	and	r3,r3,r5
 40034f0:	1986703a 	and	r3,r3,r6
 40034f4:	1800091e 	bne	r3,zero,400351c <strlen+0x78>
 40034f8:	10800104 	addi	r2,r2,4
 40034fc:	10c00017 	ldw	r3,0(r2)
 4003500:	19cb883a 	add	r5,r3,r7
 4003504:	00c6303a 	nor	r3,zero,r3
 4003508:	28c6703a 	and	r3,r5,r3
 400350c:	1986703a 	and	r3,r3,r6
 4003510:	183ff926 	beq	r3,zero,40034f8 <__alt_data_end+0xfc0034f8>
 4003514:	00000106 	br	400351c <strlen+0x78>
 4003518:	10800044 	addi	r2,r2,1
 400351c:	10c00007 	ldb	r3,0(r2)
 4003520:	183ffd1e 	bne	r3,zero,4003518 <__alt_data_end+0xfc003518>
 4003524:	1105c83a 	sub	r2,r2,r4
 4003528:	f800283a 	ret
 400352c:	2005883a 	mov	r2,r4
 4003530:	003fe706 	br	40034d0 <__alt_data_end+0xfc0034d0>
 4003534:	0005883a 	mov	r2,zero
 4003538:	f800283a 	ret

0400353c <__register_exitproc>:
 400353c:	defffa04 	addi	sp,sp,-24
 4003540:	dc000315 	stw	r16,12(sp)
 4003544:	04010034 	movhi	r16,1024
 4003548:	8413d104 	addi	r16,r16,20292
 400354c:	80c00017 	ldw	r3,0(r16)
 4003550:	dc400415 	stw	r17,16(sp)
 4003554:	dfc00515 	stw	ra,20(sp)
 4003558:	18805217 	ldw	r2,328(r3)
 400355c:	2023883a 	mov	r17,r4
 4003560:	10003726 	beq	r2,zero,4003640 <__register_exitproc+0x104>
 4003564:	10c00117 	ldw	r3,4(r2)
 4003568:	010007c4 	movi	r4,31
 400356c:	20c00e16 	blt	r4,r3,40035a8 <__register_exitproc+0x6c>
 4003570:	1a000044 	addi	r8,r3,1
 4003574:	8800221e 	bne	r17,zero,4003600 <__register_exitproc+0xc4>
 4003578:	18c00084 	addi	r3,r3,2
 400357c:	18c7883a 	add	r3,r3,r3
 4003580:	18c7883a 	add	r3,r3,r3
 4003584:	12000115 	stw	r8,4(r2)
 4003588:	10c7883a 	add	r3,r2,r3
 400358c:	19400015 	stw	r5,0(r3)
 4003590:	0005883a 	mov	r2,zero
 4003594:	dfc00517 	ldw	ra,20(sp)
 4003598:	dc400417 	ldw	r17,16(sp)
 400359c:	dc000317 	ldw	r16,12(sp)
 40035a0:	dec00604 	addi	sp,sp,24
 40035a4:	f800283a 	ret
 40035a8:	00800034 	movhi	r2,0
 40035ac:	10800004 	addi	r2,r2,0
 40035b0:	10002626 	beq	r2,zero,400364c <__register_exitproc+0x110>
 40035b4:	01006404 	movi	r4,400
 40035b8:	d9400015 	stw	r5,0(sp)
 40035bc:	d9800115 	stw	r6,4(sp)
 40035c0:	d9c00215 	stw	r7,8(sp)
 40035c4:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40035c8:	d9400017 	ldw	r5,0(sp)
 40035cc:	d9800117 	ldw	r6,4(sp)
 40035d0:	d9c00217 	ldw	r7,8(sp)
 40035d4:	10001d26 	beq	r2,zero,400364c <__register_exitproc+0x110>
 40035d8:	81000017 	ldw	r4,0(r16)
 40035dc:	10000115 	stw	zero,4(r2)
 40035e0:	02000044 	movi	r8,1
 40035e4:	22405217 	ldw	r9,328(r4)
 40035e8:	0007883a 	mov	r3,zero
 40035ec:	12400015 	stw	r9,0(r2)
 40035f0:	20805215 	stw	r2,328(r4)
 40035f4:	10006215 	stw	zero,392(r2)
 40035f8:	10006315 	stw	zero,396(r2)
 40035fc:	883fde26 	beq	r17,zero,4003578 <__alt_data_end+0xfc003578>
 4003600:	18c9883a 	add	r4,r3,r3
 4003604:	2109883a 	add	r4,r4,r4
 4003608:	1109883a 	add	r4,r2,r4
 400360c:	21802215 	stw	r6,136(r4)
 4003610:	01800044 	movi	r6,1
 4003614:	12406217 	ldw	r9,392(r2)
 4003618:	30cc983a 	sll	r6,r6,r3
 400361c:	4992b03a 	or	r9,r9,r6
 4003620:	12406215 	stw	r9,392(r2)
 4003624:	21c04215 	stw	r7,264(r4)
 4003628:	01000084 	movi	r4,2
 400362c:	893fd21e 	bne	r17,r4,4003578 <__alt_data_end+0xfc003578>
 4003630:	11006317 	ldw	r4,396(r2)
 4003634:	218cb03a 	or	r6,r4,r6
 4003638:	11806315 	stw	r6,396(r2)
 400363c:	003fce06 	br	4003578 <__alt_data_end+0xfc003578>
 4003640:	18805304 	addi	r2,r3,332
 4003644:	18805215 	stw	r2,328(r3)
 4003648:	003fc606 	br	4003564 <__alt_data_end+0xfc003564>
 400364c:	00bfffc4 	movi	r2,-1
 4003650:	003fd006 	br	4003594 <__alt_data_end+0xfc003594>

04003654 <__call_exitprocs>:
 4003654:	defff504 	addi	sp,sp,-44
 4003658:	df000915 	stw	fp,36(sp)
 400365c:	dd400615 	stw	r21,24(sp)
 4003660:	dc800315 	stw	r18,12(sp)
 4003664:	dfc00a15 	stw	ra,40(sp)
 4003668:	ddc00815 	stw	r23,32(sp)
 400366c:	dd800715 	stw	r22,28(sp)
 4003670:	dd000515 	stw	r20,20(sp)
 4003674:	dcc00415 	stw	r19,16(sp)
 4003678:	dc400215 	stw	r17,8(sp)
 400367c:	dc000115 	stw	r16,4(sp)
 4003680:	d9000015 	stw	r4,0(sp)
 4003684:	2839883a 	mov	fp,r5
 4003688:	04800044 	movi	r18,1
 400368c:	057fffc4 	movi	r21,-1
 4003690:	00810034 	movhi	r2,1024
 4003694:	1093d104 	addi	r2,r2,20292
 4003698:	12000017 	ldw	r8,0(r2)
 400369c:	45005217 	ldw	r20,328(r8)
 40036a0:	44c05204 	addi	r19,r8,328
 40036a4:	a0001c26 	beq	r20,zero,4003718 <__call_exitprocs+0xc4>
 40036a8:	a0800117 	ldw	r2,4(r20)
 40036ac:	15ffffc4 	addi	r23,r2,-1
 40036b0:	b8000d16 	blt	r23,zero,40036e8 <__call_exitprocs+0x94>
 40036b4:	14000044 	addi	r16,r2,1
 40036b8:	8421883a 	add	r16,r16,r16
 40036bc:	8421883a 	add	r16,r16,r16
 40036c0:	84402004 	addi	r17,r16,128
 40036c4:	a463883a 	add	r17,r20,r17
 40036c8:	a421883a 	add	r16,r20,r16
 40036cc:	e0001e26 	beq	fp,zero,4003748 <__call_exitprocs+0xf4>
 40036d0:	80804017 	ldw	r2,256(r16)
 40036d4:	e0801c26 	beq	fp,r2,4003748 <__call_exitprocs+0xf4>
 40036d8:	bdffffc4 	addi	r23,r23,-1
 40036dc:	843fff04 	addi	r16,r16,-4
 40036e0:	8c7fff04 	addi	r17,r17,-4
 40036e4:	bd7ff91e 	bne	r23,r21,40036cc <__alt_data_end+0xfc0036cc>
 40036e8:	00800034 	movhi	r2,0
 40036ec:	10800004 	addi	r2,r2,0
 40036f0:	10000926 	beq	r2,zero,4003718 <__call_exitprocs+0xc4>
 40036f4:	a0800117 	ldw	r2,4(r20)
 40036f8:	1000301e 	bne	r2,zero,40037bc <__call_exitprocs+0x168>
 40036fc:	a0800017 	ldw	r2,0(r20)
 4003700:	10003226 	beq	r2,zero,40037cc <__call_exitprocs+0x178>
 4003704:	a009883a 	mov	r4,r20
 4003708:	98800015 	stw	r2,0(r19)
 400370c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4003710:	9d000017 	ldw	r20,0(r19)
 4003714:	a03fe41e 	bne	r20,zero,40036a8 <__alt_data_end+0xfc0036a8>
 4003718:	dfc00a17 	ldw	ra,40(sp)
 400371c:	df000917 	ldw	fp,36(sp)
 4003720:	ddc00817 	ldw	r23,32(sp)
 4003724:	dd800717 	ldw	r22,28(sp)
 4003728:	dd400617 	ldw	r21,24(sp)
 400372c:	dd000517 	ldw	r20,20(sp)
 4003730:	dcc00417 	ldw	r19,16(sp)
 4003734:	dc800317 	ldw	r18,12(sp)
 4003738:	dc400217 	ldw	r17,8(sp)
 400373c:	dc000117 	ldw	r16,4(sp)
 4003740:	dec00b04 	addi	sp,sp,44
 4003744:	f800283a 	ret
 4003748:	a0800117 	ldw	r2,4(r20)
 400374c:	80c00017 	ldw	r3,0(r16)
 4003750:	10bfffc4 	addi	r2,r2,-1
 4003754:	15c01426 	beq	r2,r23,40037a8 <__call_exitprocs+0x154>
 4003758:	80000015 	stw	zero,0(r16)
 400375c:	183fde26 	beq	r3,zero,40036d8 <__alt_data_end+0xfc0036d8>
 4003760:	95c8983a 	sll	r4,r18,r23
 4003764:	a0806217 	ldw	r2,392(r20)
 4003768:	a5800117 	ldw	r22,4(r20)
 400376c:	2084703a 	and	r2,r4,r2
 4003770:	10000b26 	beq	r2,zero,40037a0 <__call_exitprocs+0x14c>
 4003774:	a0806317 	ldw	r2,396(r20)
 4003778:	2088703a 	and	r4,r4,r2
 400377c:	20000c1e 	bne	r4,zero,40037b0 <__call_exitprocs+0x15c>
 4003780:	89400017 	ldw	r5,0(r17)
 4003784:	d9000017 	ldw	r4,0(sp)
 4003788:	183ee83a 	callr	r3
 400378c:	a0800117 	ldw	r2,4(r20)
 4003790:	15bfbf1e 	bne	r2,r22,4003690 <__alt_data_end+0xfc003690>
 4003794:	98800017 	ldw	r2,0(r19)
 4003798:	153fcf26 	beq	r2,r20,40036d8 <__alt_data_end+0xfc0036d8>
 400379c:	003fbc06 	br	4003690 <__alt_data_end+0xfc003690>
 40037a0:	183ee83a 	callr	r3
 40037a4:	003ff906 	br	400378c <__alt_data_end+0xfc00378c>
 40037a8:	a5c00115 	stw	r23,4(r20)
 40037ac:	003feb06 	br	400375c <__alt_data_end+0xfc00375c>
 40037b0:	89000017 	ldw	r4,0(r17)
 40037b4:	183ee83a 	callr	r3
 40037b8:	003ff406 	br	400378c <__alt_data_end+0xfc00378c>
 40037bc:	a0800017 	ldw	r2,0(r20)
 40037c0:	a027883a 	mov	r19,r20
 40037c4:	1029883a 	mov	r20,r2
 40037c8:	003fb606 	br	40036a4 <__alt_data_end+0xfc0036a4>
 40037cc:	0005883a 	mov	r2,zero
 40037d0:	003ffb06 	br	40037c0 <__alt_data_end+0xfc0037c0>

040037d4 <__mulsi3>:
 40037d4:	0005883a 	mov	r2,zero
 40037d8:	20000726 	beq	r4,zero,40037f8 <__mulsi3+0x24>
 40037dc:	20c0004c 	andi	r3,r4,1
 40037e0:	2008d07a 	srli	r4,r4,1
 40037e4:	18000126 	beq	r3,zero,40037ec <__mulsi3+0x18>
 40037e8:	1145883a 	add	r2,r2,r5
 40037ec:	294b883a 	add	r5,r5,r5
 40037f0:	203ffa1e 	bne	r4,zero,40037dc <__alt_data_end+0xfc0037dc>
 40037f4:	f800283a 	ret
 40037f8:	f800283a 	ret

040037fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40037fc:	defffd04 	addi	sp,sp,-12
 4003800:	df000215 	stw	fp,8(sp)
 4003804:	df000204 	addi	fp,sp,8
 4003808:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400380c:	0001883a 	nop
 4003810:	e0bfff17 	ldw	r2,-4(fp)
 4003814:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4003818:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400381c:	10000226 	beq	r2,zero,4003828 <_exit+0x2c>
    ALT_SIM_FAIL();
 4003820:	002af070 	cmpltui	zero,zero,43969
 4003824:	00000106 	br	400382c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4003828:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400382c:	003fff06 	br	400382c <__alt_data_end+0xfc00382c>
